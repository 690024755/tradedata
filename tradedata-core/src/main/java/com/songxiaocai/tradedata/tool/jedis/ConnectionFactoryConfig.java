package com.songxiaocai.tradedata.tool.jedis;/* * Description:com.songxiaocai.tradedata.tool.jedis * @Date Create on 23:14 * @author <a href="mailto:yangyi@zuozh.com">yangyi</a> * @Version JDK 1.7 * @since version 1.0 Copyright 2019-04-23日ZZJR All Rights Reserved. */import com.alibaba.fastjson.JSON;import lombok.extern.slf4j.Slf4j;import org.apache.velocity.runtime.directive.Foreach;import org.springframework.beans.BeansException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.dao.DataAccessException;import org.springframework.data.redis.connection.*;import org.springframework.data.redis.connection.jedis.JedisClientConfiguration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.connection.jedis.JedisSentinelConnection;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.RedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;import org.springframework.stereotype.Component;import redis.clients.jedis.JedisPoolConfig;import redis.clients.jedis.JedisSentinelPool;import java.time.Duration;import java.util.*;import java.util.stream.Collectors;import java.util.stream.Stream;@Slf4j@Componentpublic class ConnectionFactoryConfig implements RedisConnectionFactory, BeanPostProcessor, ApplicationContextAware {	private ApplicationContext app;	@Autowired	JedisPoolConfig jedisPoolConfig;	@Override	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {		this.app = applicationContext;	}	@Bean(name = "jedisConnectionFactory")	public JedisConnectionFactory init() {		RedisSentinelConfiguration sentinelConfig = new RedisSentinelConfiguration();		Iterable<RedisNode> sentinels = new LinkedHashSet<>();		((LinkedHashSet<RedisNode>) sentinels).addAll(Stream.of(new RedisNode("47.98.207.202", 26379), new RedisNode("47.98.207.202", 26380), new RedisNode("47.98.207.202", 26381)).collect(Collectors.toList()));		sentinelConfig.setMaster("mymaster");		sentinelConfig.setPassword("songxiaocai2018");		sentinelConfig.setSentinels(sentinels);		JedisClientConfiguration.DefaultJedisClientConfigurationBuilder jedisClientConfiguration =(JedisClientConfiguration.DefaultJedisClientConfigurationBuilder) JedisClientConfiguration.builder();		jedisClientConfiguration.connectTimeout(Duration.ofSeconds(600L));		jedisClientConfiguration.readTimeout(Duration.ofSeconds(600L));		jedisClientConfiguration.poolConfig(jedisPoolConfig);		jedisClientConfiguration.usePooling();		JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory(sentinelConfig, jedisClientConfiguration.build());		//暂时不用JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory(sentinelConfig, jedisPoolConfig);		return jedisConnectionFactory;	}	@Override	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {		Object redisTemplateObj = app.getBean("redisTemplate");		JedisConnectionFactory jedisConnectionFactory = (JedisConnectionFactory) app.getBean("jedisConnectionFactory");		RedisTemplate redisTemplateObjTmp=null;		if(redisTemplateObj !=null && redisTemplateObj instanceof RedisTemplate){			 redisTemplateObjTmp = (RedisTemplate) redisTemplateObj;		}		//类型转换需要判断下是否错误		if (beanName.contains("redisTemplate") && bean instanceof RedisTemplate) {			redisTemplateObjTmp.setConnectionFactory(jedisConnectionFactory);//			return redisTemplateObj;			return redisTemplateObjTmp;		}		return bean;	}	@Override	public RedisConnection getConnection() {		return null;	}	@Override	public RedisClusterConnection getClusterConnection() {		return null;	}	@Override	public boolean getConvertPipelineAndTxResults() {		return false;	}	@Override	public RedisSentinelConnection getSentinelConnection() {		return null;	}	@Override	public DataAccessException translateExceptionIfPossible(RuntimeException e) {		return null;	}}