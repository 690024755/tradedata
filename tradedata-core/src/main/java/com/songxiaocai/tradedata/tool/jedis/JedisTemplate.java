package com.songxiaocai.tradedata.tool.jedis;/* * Description:com.songxiaocai.tradedata.tool * @Date Create on 14:39 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-02-25日SXC All Rights Reserved. */import com.songxiaocai.tradedata.tool.map.MapUtil;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeansException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.data.redis.connection.RedisPassword;import org.springframework.data.redis.connection.RedisStandaloneConfiguration;import org.springframework.data.redis.connection.jedis.JedisClientConfiguration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.util.CollectionUtils;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import redis.clients.jedis.exceptions.JedisException;import java.time.Duration;import java.util.List;import java.util.Map;import java.util.Set;import java.util.concurrent.TimeUnit;@Slf4jpublic class JedisTemplate {	private RedisTemplate<String, String> redisTemplate;	public void setRedisTemplate(RedisTemplate<String, String> redisTemplate) {		this.redisTemplate = redisTemplate;	}	public String generateRedisKey(Map<String,Object> map) {		return MapUtil.mapToString(map,".");	}	public boolean expire(String key, long time) {		try {			if (time > 0) {				redisTemplate.expire(key, time, TimeUnit.SECONDS);			}			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public long getExpire(String key) {		return redisTemplate.getExpire(key, TimeUnit.SECONDS);	}	public boolean hasKey(String key) {		try {			return redisTemplate.hasKey(key);		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public void del(String... key) {		if (key != null && key.length > 0) {			if (key.length == 1) {				redisTemplate.delete(key[0]);			} else {				redisTemplate.delete(CollectionUtils.arrayToList(key));			}		}	}	public Object get(String key) {		return key == null ? null : redisTemplate.opsForValue().get(key);	}	public boolean set(String key, String value) {		try {			redisTemplate.opsForValue().set(key, value);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean set(String key, String value, long time) {		try {			if (time > 0) {				redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);			} else {				set(key, value);			}			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public long incr(String key, long delta) {		if (delta < 0) {			throw new RuntimeException("递增因子必须大于0");		}		return redisTemplate.opsForValue().increment(key, delta);	}	public long decr(String key, long delta) {		if (delta < 0) {			throw new RuntimeException("递减因子必须大于0");		}		return redisTemplate.opsForValue().increment(key, -delta);	}	public Object hget(String key, String item) {		return redisTemplate.opsForHash().get(key, item);	}	public Map<Object, Object> hmget(String key) {		return redisTemplate.opsForHash().entries(key);	}	public boolean hmset(String key, Map<String, String> map) {		try {			redisTemplate.opsForHash().putAll(key, map);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean hmset(String key, Map<String, Object> map, long time) {		try {			redisTemplate.opsForHash().putAll(key, map);			if (time > 0) {				expire(key, time);			}			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean hset(String key, String item, Object value) {		try {			redisTemplate.opsForHash().put(key, item, value);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean hset(String key, String item, Object value, long time) {		try {			redisTemplate.opsForHash().put(key, item, value);			if (time > 0) {				expire(key, time);			}			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public void hdel(String key, Object... item) {		redisTemplate.opsForHash().delete(key, item);	}	public boolean hHasKey(String key, String item) {		return redisTemplate.opsForHash().hasKey(key, item);	}	public double hincr(String key, String item, double by) {		return redisTemplate.opsForHash().increment(key, item, by);	}	public double hdecr(String key, String item, double by) {		return redisTemplate.opsForHash().increment(key, item, -by);	}	public Set<String> sGet(String key) {		try {			return redisTemplate.opsForSet().members(key);		} catch (Exception e) {			e.printStackTrace();			return null;		}	}	public boolean sHasKey(String key, Object value) {		try {			return redisTemplate.opsForSet().isMember(key, value);		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public long sSet(String key, String... values) {		try {			return redisTemplate.opsForSet().add(key, values);		} catch (Exception e) {			e.printStackTrace();			return 0;		}	}	public long sSetAndTime(String key, long time, String... values) {		try {			Long count = redisTemplate.opsForSet().add(key, values);			if (time > 0) expire(key, time);			return count;		} catch (Exception e) {			e.printStackTrace();			return 0;		}	}	public long sGetSetSize(String key) {		try {			return redisTemplate.opsForSet().size(key);		} catch (Exception e) {			e.printStackTrace();			return 0;		}	}	public long setRemove(String key, Object... values) {		try {			Long count = redisTemplate.opsForSet().remove(key, values);			return count;		} catch (Exception e) {			e.printStackTrace();			return 0;		}	}	public List<String> lGet(String key, long start, long end) {		try {			return redisTemplate.opsForList().range(key, start, end);		} catch (Exception e) {			e.printStackTrace();			return null;		}	}	public long lGetListSize(String key) {		try {			return redisTemplate.opsForList().size(key);		} catch (Exception e) {			e.printStackTrace();			return 0;		}	}	public Object lGetIndex(String key, long index) {		try {			return redisTemplate.opsForList().index(key, index);		} catch (Exception e) {			e.printStackTrace();			return null;		}	}	public boolean lSet(String key, String value) {		try {			redisTemplate.opsForList().rightPush(key, value);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean lSet(String key, String value, long time) {		try {			redisTemplate.opsForList().rightPush(key, value);			if (time > 0) expire(key, time);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean lSet(String key, List<String> value) {		try {			redisTemplate.opsForList().rightPushAll(key, value);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean lSet(String key, List<String> value, long time) {		try {			redisTemplate.opsForList().rightPushAll(key, value);			if (time > 0) expire(key, time);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public boolean lUpdateIndex(String key, long index, String value) {		try {			redisTemplate.opsForList().set(key, index, value);			return true;		} catch (Exception e) {			e.printStackTrace();			return false;		}	}	public long lRemove(String key, long count, Object value) {		try {			Long remove = redisTemplate.opsForList().remove(key, count, value);			return remove;		} catch (Exception e) {			e.printStackTrace();			return 0;		}	}}