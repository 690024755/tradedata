package com.songxiaocai.tradedata.tool.http;/* * Description:com.songxiaocai.tradedata.http * @Date Create on 14:00 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-02-25日SXC All Rights Reserved. */import lombok.extern.slf4j.Slf4j;import org.apache.http.*;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.params.ClientPNames;import org.apache.http.client.params.CookiePolicy;import org.apache.http.conn.ConnectTimeoutException;import org.apache.http.entity.StringEntity;import org.apache.http.message.BasicHeader;import org.apache.http.protocol.HTTP;import org.springframework.stereotype.Component;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.SocketTimeoutException;import java.util.List;@Slf4j@Componentpublic class HttpRequestSimple {	private final static String CONN_TIMEOUT = "ConnectTimeout";	private final static String CONN_FAIL = "CONN_FAIL";	public String postSendHttpWeb(String url, String body) {		if (url == null || "".equals(url)) {			log.error("request url is empty.");			return null;		}		HttpClient httpClient = CustomHttpClient.GetHttpClient();		httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,				CookiePolicy.RFC_2965);		HttpPost post = new HttpPost(url);		HttpResponse resp = null;		Header[] headers={new BasicHeader(				"Content-Type", "application/json;charset=UTF-8")};		post.setHeaders(headers);		try {			StringEntity stringEntity = new StringEntity(body, "UTF-8");			stringEntity.setContentEncoding(new BasicHeader(					HTTP.CONTENT_ENCODING, "UTF-8"));			// 设置请求主体			post.setEntity(stringEntity);			// 发起交易			resp = httpClient.execute(post);			// 响应分析			HttpEntity entity = resp.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader(					entity.getContent(), "UTF-8"));			StringBuffer responseString = new StringBuffer();			String result = br.readLine();			while (result != null) {				responseString.append(result);				result = br.readLine();			}			return responseString.toString();		} catch (ConnectTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (SocketTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (Exception e) {			log.error(e.getMessage(), e);			return null;		} finally {			try {				resp.getEntity().getContent().close();			} catch (IllegalStateException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}	}	public String postSendHttpApi(String url,String body) {		if (url == null || "".equals(url)) {			log.error("request url is empty.");			return null;		}		HttpClient httpClient = CustomHttpClient.GetHttpClient();		httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,				CookiePolicy.BROWSER_COMPATIBILITY);		HttpPost post = new HttpPost(url);		HttpResponse resp = null;		Header[] headers={new BasicHeader(				"Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")};		post.setHeaders(headers);		try {			StringEntity stringEntity = new StringEntity(body, "UTF-8");			stringEntity.setContentEncoding(new BasicHeader(					HTTP.CONTENT_ENCODING, "UTF-8"));			// 设置请求主体			post.setEntity(stringEntity);			// 发起交易			resp = httpClient.execute(post);			// 响应分析			HttpEntity entity = resp.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader(					entity.getContent(), "UTF-8"));			StringBuffer responseString = new StringBuffer();			String result = br.readLine();			while (result != null) {				responseString.append(result);				result = br.readLine();			}			return responseString.toString();		} catch (ConnectTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (SocketTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (Exception e) {			log.error(e.getMessage(), e);			return null;		} finally {			try {				resp.getEntity().getContent().close();			} catch (IllegalStateException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}	}	public String postSendHttpApi(String url, String cookie,String body) {		if (url == null || "".equals(url)) {			log.error("request url is empty.");			return null;		}		HttpClient httpClient = CustomHttpClient.GetHttpClient();		httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,				CookiePolicy.BROWSER_COMPATIBILITY);		HttpPost post = new HttpPost(url);		HttpResponse resp = null;		Header[] headers={new BasicHeader(				"Content-Type", "application/x-www-form-urlencoded;charset=UTF-8"),new BasicHeader(				"Cookie", "SESSION=".concat(cookie))};		post.setHeaders(headers);		try {			StringEntity stringEntity = new StringEntity(body, "UTF-8");			stringEntity.setContentEncoding(new BasicHeader(					HTTP.CONTENT_ENCODING, "UTF-8"));			// 设置请求主体			post.setEntity(stringEntity);			// 发起交易			resp = httpClient.execute(post);			// 响应分析			HttpEntity entity = resp.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader(					entity.getContent(), "UTF-8"));			StringBuffer responseString = new StringBuffer();			String result = br.readLine();			while (result != null) {				responseString.append(result);				result = br.readLine();			}			return responseString.toString();		} catch (ConnectTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (SocketTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (Exception e) {			log.error(e.getMessage(), e);			return null;		} finally {			try {				resp.getEntity().getContent().close();			} catch (IllegalStateException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}	}	public String getSendHttp(String url) {		if (url == null || "".equals(url)) {			log.error("request url is empty.");			return null;		}		HttpClient httpClient = CustomHttpClient.GetHttpClient();		HttpGet get = new HttpGet(url);		get.setHeader("Content-Type", "text/html;charset=UTF-8");		HttpResponse resp = null;		try {			// 发起交易			resp = httpClient.execute(get);			// 响应分析			HttpEntity entity = resp.getEntity();			BufferedReader br = new BufferedReader(new InputStreamReader(					entity.getContent()));			StringBuffer responseString = new StringBuffer();			String result = br.readLine();			while (result != null) {				responseString.append(result);				result = br.readLine();			}			return responseString.toString();		} catch (ConnectTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (SocketTimeoutException cte) {			log.error(cte.getMessage(), cte);			return null;		} catch (Exception e) {			log.error(e.getMessage(), e);			return null;		} finally {			// httpClient.getConnectionManager().shutdown();			try {				resp.getEntity().getContent().close();			} catch (IllegalStateException e) {				e.printStackTrace();			} catch (IOException e) {				e.printStackTrace();			}		}	}	public String postPramaList(List<NameValuePair> params, String url) {		HttpClient httpClient = CustomHttpClient.GetHttpClient();		HttpPost post = new HttpPost(url);		post.setHeader("Content-Type",				"application/x-www-form-urlencoded;charset=utf-8");		BufferedReader br = null;		try {			UrlEncodedFormEntity formEntiry = new UrlEncodedFormEntity(params,					HTTP.UTF_8);			// 设置请求参数			post.setEntity(formEntiry);			// 发起交易			HttpResponse resp = httpClient.execute(post);			int ret = resp.getStatusLine().getStatusCode();			if (ret == HttpStatus.SC_OK) {				// 响应分析				HttpEntity entity = resp.getEntity();				br = new BufferedReader(new InputStreamReader(						entity.getContent(), "GBK"));				StringBuffer responseString = new StringBuffer();				String result = br.readLine();				while (result != null) {					responseString.append(result);					result = br.readLine();				}				return responseString.toString();			} else {				return null;			}		} catch (Exception e) {			e.printStackTrace();			return null;		} finally {			if (br != null) {				try {					br.close();				} catch (IOException e) {					// do nothing				}			}		}	}}