package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 15:17 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-04-10日SXC All Rights Reserved. */import com.alibaba.dubbo.config.annotation.Reference;import com.songxiaocai.tradedata.application.repository.SxcFixPriceBaseInfoRepository;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcFixPriceBaseInfo;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcFixPriceBaseInfoExample;import com.songxiaocai.tradedata.service.params.SxcFixPriceBaseInfoDTO;import com.sxc.common.domain.result.Result;import com.sxc.gateway.client.GWResult;import com.sxc.jotunheim.trade.provider.MarketWaveRebateProvider;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service@Slf4jpublic class RebateService {	@Autowired	private SxcFixPriceBaseInfoRepository sxcFixPriceBaseInfoRepository;	@Reference(timeout = 60000)	MarketWaveRebateProvider marketWaveRebateProvider;	/**	 * 执行返差价任务	 * @param userId	 * @return	 */	public Boolean excutePrice(Integer userId) {		GWResult<Boolean> record=null;		GWResult<Boolean>  manul=null;		try {			 record= marketWaveRebateProvider.manualRecordRebate(userId);		}catch (Exception e){			log.error("marketWaveRebateProvider.manualRecordRebate", e);		}finally {			manul=marketWaveRebateProvider.manualGrantRebate(userId);			if( manul.isSuccess()){				return true;			}else return false;		}	}	public Result<String> modifyPrice(Integer ItemId, Long amount){		Result<String> result=new Result<>();		Long initAmount =0L;		SxcFixPriceBaseInfoExample sxcFixPriceBaseInfoExample=new SxcFixPriceBaseInfoExample();		SxcFixPriceBaseInfoExample.Criteria cr=sxcFixPriceBaseInfoExample.createCriteria();		cr.andItemIdEqualTo(ItemId);		SxcFixPriceBaseInfoDTO sxcFixPriceBaseInfoDTO=sxcFixPriceBaseInfoRepository.selectByExample(sxcFixPriceBaseInfoExample);		initAmount=sxcFixPriceBaseInfoDTO.getPurchaseInquiryPrice();		SxcFixPriceBaseInfo sxcFixPriceBaseInfo=new SxcFixPriceBaseInfo();		sxcFixPriceBaseInfo.setPurchaseInquiryPrice(amount+initAmount);		Boolean bl=sxcFixPriceBaseInfoRepository.updateByExampleSelective(sxcFixPriceBaseInfo,sxcFixPriceBaseInfoExample);		result.setSuccess(bl== true ? true : false);		result.setErrorMessage("采购价格修改成功");		return result;	}}