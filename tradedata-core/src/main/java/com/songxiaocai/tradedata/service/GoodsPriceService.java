package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 14:32 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-05-13日SXC All Rights Reserved. */import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.songxiaocai.tradedata.application.repository.SxcFixPriceBaseInfoRepository;import com.songxiaocai.tradedata.application.repository.SxcFixPriceRuleRepository;import com.songxiaocai.tradedata.application.repository.SxcGatewayApiRepository;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcFixPriceBaseInfo;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcFixPriceRule;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcFixPriceBaseInfoExample;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcFixPriceRuleExample;import com.songxiaocai.tradedata.service.params.SxcFixPriceBaseInfoDTO;import com.songxiaocai.tradedata.service.params.SxcFixPriceRuleDTO;import com.sxc.common.domain.result.Result;import com.sxc.jotunheim.priceservice.result.rule.ladder.*;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Service@Slf4jpublic class GoodsPriceService {	@Autowired	private SxcFixPriceRuleRepository sxcFixPriceRuleRepository;	@Autowired	private SxcFixPriceBaseInfoRepository sxcFixPriceBaseInfoRepository;	/**	 * 修改浮动价格	 * @param ItemId	 * @return	 */	public Result<String> modifyRaisePrice(Integer ItemId,Long raisePrice)  {		Result<String> result = new Result<String>();		SxcFixPriceRuleExample example=new SxcFixPriceRuleExample();		SxcFixPriceRuleExample.Criteria cr=example.createCriteria();		cr.andRuleTargetEqualTo(String.valueOf(ItemId));		SxcFixPriceRuleDTO sxc=sxcFixPriceRuleRepository.selectByExample(example);		if(sxc==null){			result.setSuccess(false);			result.setErrorMessage("加价规则不存在");			return result;		}		String rules=parseCityLadderPriceRuleDTO(sxc,raisePrice);		SxcFixPriceRule recordRules=new SxcFixPriceRule();		recordRules.setRules(rules);		SxcFixPriceRuleExample exampleRules=new SxcFixPriceRuleExample();		SxcFixPriceRuleExample.Criteria crRules=exampleRules.createCriteria();		crRules.andRuleTargetEqualTo(sxc.getRuleTarget());		Boolean bl=sxcFixPriceRuleRepository.updateByExampleSelective(recordRules,exampleRules);		if(bl){			result.setSuccess(true);			result.setSuccessInfo("修改浮动价格成功");			return result;		}else{			result.setSuccess(false);			result.setSuccessInfo("修改浮动价格失败");			return result;		}	}	private String parseCityLadderPriceRuleDTO(SxcFixPriceRuleDTO sxc,Long raisePrice){		LadderPriceRuleDTO ladderPriceRuleDTO= JSONObject.parseObject(sxc.getRules(),LadderPriceRuleDTO.class);		List<UserLadderPriceRuleDTO> userLadderPriceRuleDTOList=ladderPriceRuleDTO.getUserLadderPriceRules();		if(!userLadderPriceRuleDTOList.isEmpty()){			for (UserLadderPriceRuleDTO userLadderPriceRuleDTO:userLadderPriceRuleDTOList			) {				List<LadderPriceRuleEntryDTO> ladderPriceRuleEntryDTOList=userLadderPriceRuleDTO.getLadderPriceRuleEntries();				if(!ladderPriceRuleEntryDTOList.isEmpty()){					for(LadderPriceRuleEntryDTO ladderPriceRuleEntryDTO:ladderPriceRuleEntryDTOList){						ladderPriceRuleEntryDTO.setRaisePrice(raisePrice);						return JSON.toJSONString(ladderPriceRuleDTO);					}				}			}		}		List<PickhouseLadderPriceRuleDTO> pickhouseLadderPriceRuleDTOList=ladderPriceRuleDTO.getPickhouseLadderPriceRules();		if(!pickhouseLadderPriceRuleDTOList.isEmpty()){			for (PickhouseLadderPriceRuleDTO pickhouseLadderPriceRuleDTO:pickhouseLadderPriceRuleDTOList			) {				List<LadderPriceRuleEntryDTO> ladderPriceRuleEntryDTOList=pickhouseLadderPriceRuleDTO.getLadderPriceRuleEntries();				if(!ladderPriceRuleEntryDTOList.isEmpty()){					for (LadderPriceRuleEntryDTO ladderPriceRuleEntryDTO:ladderPriceRuleEntryDTOList){						ladderPriceRuleEntryDTO.setRaisePrice(raisePrice);						return JSON.toJSONString(ladderPriceRuleDTO);					}				}			}		}		CityLadderPriceRuleDTO cityLadderPriceRule=ladderPriceRuleDTO.getCityLadderPriceRule();		if(cityLadderPriceRule!=null){			List<LadderPriceRuleEntryDTO> LadderPriceRuleEntryDTOList=cityLadderPriceRule.getLadderPriceRuleEntries();			if(!LadderPriceRuleEntryDTOList.isEmpty()){				for(LadderPriceRuleEntryDTO ladderPriceRuleEntryDTO:LadderPriceRuleEntryDTOList){					ladderPriceRuleEntryDTO.setRaisePrice(raisePrice);					return JSON.toJSONString(ladderPriceRuleDTO);				}			}		}		return JSON.toJSONString(ladderPriceRuleDTO);	}	/**	 * 修改基准价格	 */	public Result<String> modifyBasePrice(Integer ItemId,Long basePrice)  {		Result<String> result = new Result<String>();		SxcFixPriceBaseInfoExample sxcFixPriceBaseInfoExample=new SxcFixPriceBaseInfoExample();		SxcFixPriceBaseInfoExample.Criteria cr=sxcFixPriceBaseInfoExample.createCriteria();		cr.andItemIdEqualTo(ItemId);		SxcFixPriceBaseInfoDTO sxcFixPriceBaseInfoDTO=sxcFixPriceBaseInfoRepository.selectByExample(sxcFixPriceBaseInfoExample);		if(sxcFixPriceBaseInfoDTO==null){			result.setSuccess(false);			result.setErrorMessage("询价列表不存在");			return result;		}		SxcFixPriceBaseInfo record=new SxcFixPriceBaseInfo();		record.setPurchaseInquiryPrice(basePrice);		SxcFixPriceBaseInfoExample example=new SxcFixPriceBaseInfoExample();		SxcFixPriceBaseInfoExample.Criteria crSxcFixPriceBaseInfo=example.createCriteria();		crSxcFixPriceBaseInfo.andItemIdEqualTo(ItemId);		Boolean bl=sxcFixPriceBaseInfoRepository.updateByExampleSelective(record,example);		if(bl){			result.setSuccess(true);			result.setSuccessInfo("修改基准价格成功");			return result;		}else{			result.setSuccess(false);			result.setSuccessInfo("修改基准价格失败");			return result;		}	}}