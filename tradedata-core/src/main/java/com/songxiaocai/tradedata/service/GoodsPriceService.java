package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 14:32 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-05-13日SXC All Rights Reserved. */import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Lists;import com.songxiaocai.tradedata.application.repository.*;import com.songxiaocai.tradedata.infrastructure.repository.entity.*;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcFixPriceBaseInfoExample;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcFixPriceRuleExample;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcGoodsGroupRelationExample;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcServiceRuleExample;import com.songxiaocai.tradedata.service.params.SxcFixPriceBaseInfoDTO;import com.songxiaocai.tradedata.service.params.SxcFixPriceRuleDTO;import com.sxc.common.domain.result.Result;import com.sxc.gateway.client.GWListResult;import com.sxc.jotunheim.logistics.freight.param.query.ServiceRuleQueryDTO;import com.sxc.jotunheim.logistics.freight.provider.ServiceRuleProvider;import com.sxc.jotunheim.logistics.freight.result.ChargeStandardDTO;import com.sxc.jotunheim.logistics.freight.result.ServiceRuleDTO;import com.sxc.jotunheim.priceservice.result.rule.ladder.*;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Service@Slf4jpublic class GoodsPriceService {	@Autowired	private SxcFixPriceRuleRepository sxcFixPriceRuleRepository;	@Autowired	private SxcFixPriceBaseInfoRepository sxcFixPriceBaseInfoRepository;	@Autowired	private SxcItemSkuRepository sxcItemSkuRepository;	@Autowired	private SxcGoodsGroupRelationRepository sxcGoodsGroupRelationRepository;	@Autowired	private SxcServiceRuleRepository sxcServiceRuleRepository;	@Reference(timeout = 6000000)	ServiceRuleProvider serviceRuleProvider;	/**	 * 修改浮动价格	 * @param ItemId	 * @return	 */	public Result<String> modifyRaisePrice(Integer ItemId,Long raisePrice)  {		Result<String> result = new Result<String>();		SxcFixPriceRuleExample example=new SxcFixPriceRuleExample();		SxcFixPriceRuleExample.Criteria cr=example.createCriteria();		cr.andRuleTargetEqualTo(String.valueOf(ItemId));		SxcFixPriceRuleDTO sxc=sxcFixPriceRuleRepository.selectByExample(example);		if(sxc==null){			result.setSuccess(false);			result.setErrorMessage("加价规则不存在");			return result;		}		String rules=parseCityLadderPriceRuleDTO(sxc,raisePrice);		SxcFixPriceRule recordRules=new SxcFixPriceRule();		recordRules.setRules(rules);		SxcFixPriceRuleExample exampleRules=new SxcFixPriceRuleExample();		SxcFixPriceRuleExample.Criteria crRules=exampleRules.createCriteria();		crRules.andRuleTargetEqualTo(sxc.getRuleTarget());		Boolean bl=sxcFixPriceRuleRepository.updateByExampleSelective(recordRules,exampleRules);		if(bl){			result.setSuccess(true);			result.setSuccessInfo("修改浮动价格成功");			return result;		}else{			result.setSuccess(false);			result.setSuccessInfo("修改浮动价格失败");			return result;		}	}	private String parseCityLadderPriceRuleDTO(SxcFixPriceRuleDTO sxc,Long raisePrice){		LadderPriceRuleDTO ladderPriceRuleDTO= JSONObject.parseObject(sxc.getRules(),LadderPriceRuleDTO.class);		//userLadderPriceRule		List<UserLadderPriceRuleDTO> userLadderPriceRuleDTOList=ladderPriceRuleDTO.getUserLadderPriceRules();		if(!userLadderPriceRuleDTOList.isEmpty()){			for (UserLadderPriceRuleDTO userLadderPriceRuleDTO:userLadderPriceRuleDTOList			) {				List<LadderPriceRuleEntryDTO> ladderPriceRuleEntryDTOList=userLadderPriceRuleDTO.getLadderPriceRuleEntries();				if(!ladderPriceRuleEntryDTOList.isEmpty()){					for(LadderPriceRuleEntryDTO ladderPriceRuleEntryDTO:ladderPriceRuleEntryDTOList){						ladderPriceRuleEntryDTO.setRaisePrice(raisePrice);						return JSON.toJSONString(ladderPriceRuleDTO);					}				}			}		}		//pickhouseLadderPriceRule		List<PickhouseLadderPriceRuleDTO> pickhouseLadderPriceRuleDTOList=ladderPriceRuleDTO.getPickhouseLadderPriceRules();		if(!pickhouseLadderPriceRuleDTOList.isEmpty()){			for (PickhouseLadderPriceRuleDTO pickhouseLadderPriceRuleDTO:pickhouseLadderPriceRuleDTOList			) {				List<LadderPriceRuleEntryDTO> ladderPriceRuleEntryDTOList=pickhouseLadderPriceRuleDTO.getLadderPriceRuleEntries();				if(!ladderPriceRuleEntryDTOList.isEmpty()){					for (LadderPriceRuleEntryDTO ladderPriceRuleEntryDTO:ladderPriceRuleEntryDTOList){						ladderPriceRuleEntryDTO.setRaisePrice(raisePrice);						return JSON.toJSONString(ladderPriceRuleDTO);					}				}			}		}		//cityLadderPriceRule		CityLadderPriceRuleDTO cityLadderPriceRule=ladderPriceRuleDTO.getCityLadderPriceRule();		if(cityLadderPriceRule!=null){			List<LadderPriceRuleEntryDTO> LadderPriceRuleEntryDTOList=cityLadderPriceRule.getLadderPriceRuleEntries();			if(!LadderPriceRuleEntryDTOList.isEmpty()){				for(LadderPriceRuleEntryDTO ladderPriceRuleEntryDTO:LadderPriceRuleEntryDTOList){					ladderPriceRuleEntryDTO.setRaisePrice(raisePrice);					return JSON.toJSONString(ladderPriceRuleDTO);				}			}		}		return JSON.toJSONString(ladderPriceRuleDTO);	}	/**	 * 修改基准价格	 */	public Result<String> modifyBasePrice(Integer ItemId,Long basePrice)  {		Result<String> result = new Result<String>();		SxcFixPriceBaseInfoExample sxcFixPriceBaseInfoExample=new SxcFixPriceBaseInfoExample();		SxcFixPriceBaseInfoExample.Criteria cr=sxcFixPriceBaseInfoExample.createCriteria();		cr.andItemIdEqualTo(ItemId);		SxcFixPriceBaseInfoDTO sxcFixPriceBaseInfoDTO=sxcFixPriceBaseInfoRepository.selectByExample(sxcFixPriceBaseInfoExample);		if(sxcFixPriceBaseInfoDTO==null){			result.setSuccess(false);			result.setErrorMessage("询价列表不存在");			return result;		}		SxcFixPriceBaseInfo record=new SxcFixPriceBaseInfo();		record.setPurchaseInquiryPrice(basePrice);		SxcFixPriceBaseInfoExample example=new SxcFixPriceBaseInfoExample();		SxcFixPriceBaseInfoExample.Criteria crSxcFixPriceBaseInfo=example.createCriteria();		crSxcFixPriceBaseInfo.andItemIdEqualTo(ItemId);		Boolean bl=sxcFixPriceBaseInfoRepository.updateByExampleSelective(record,example);		if(bl){			result.setSuccess(true);			result.setSuccessInfo("修改基准价格成功");			return result;		}else{			result.setSuccess(false);			result.setSuccessInfo("修改基准价格失败");			return result;		}//		return result;	}	/*	  根据itemId与服务站pickhouseId修改为免服务费	 */	public Boolean modifyFreightFee(String ItemId,Integer pickhouseId)  {		//根据ItemId查询商品分组，返回list类型		String[] ItemIds=ItemId.split(",");		List<Integer> catIds= Lists.newArrayList();		List<Integer> skuIdTmp= Lists.newArrayList();		List<Integer> goodsgroupIds= Lists.newArrayList();		for(String ItemIdTmp:ItemIds){			List<SxcItemSku> listTmp=sxcItemSkuRepository.getByItemId(Integer.valueOf(ItemIdTmp));			if(listTmp!=null){				Integer catId=listTmp.get(0).getCatId();				Integer skuid=listTmp.get(0).getStockSkuId();				catIds.add(catId);				skuIdTmp.add(skuid);			}		}		SxcGoodsGroupRelationExample example=new SxcGoodsGroupRelationExample();		SxcGoodsGroupRelationExample.Criteria cr=example.createCriteria();		cr.andStateEqualTo(1);		cr.andTargetIdIn(skuIdTmp);		List<SxcGoodsGroupRelation> goodsGroup=sxcGoodsGroupRelationRepository.selectByExample(example);		if(goodsGroup!=null){			for(SxcGoodsGroupRelation sxcGoodsGroupRelation:goodsGroup){				goodsgroupIds.add(sxcGoodsGroupRelation.getGroupId());			}		}//判断品类与商品分组都在一条规则，则走这条收费规则		//根据服务站查询所有的运费规则		ServiceRuleQueryDTO serviceRuleQueryDTO=new ServiceRuleQueryDTO();		serviceRuleQueryDTO.setEnabled(1);		serviceRuleQueryDTO.setCurPage(1);		serviceRuleQueryDTO.setPageSize(15);		serviceRuleQueryDTO.setPickhouseId(pickhouseId);		List<String> ruleGroupId= Lists.newArrayList();		GWListResult<ServiceRuleDTO> serviceRuleDTO = serviceRuleProvider.queryServiceRule(serviceRuleQueryDTO);		if(serviceRuleDTO!=null && !catIds.isEmpty() && !goodsgroupIds.isEmpty()){			for (ServiceRuleDTO ruleDTO : serviceRuleDTO.getResult()) {				Boolean anyMatchCatId=catIds.stream().distinct().anyMatch(x->ruleDTO.getCats().contains(x));				Boolean anyMatchGoodsgroupId=goodsgroupIds.stream().distinct().anyMatch(x->ruleDTO.getGoodsGroups().contains(x));				if( anyMatchCatId && anyMatchGoodsgroupId){					ruleGroupId.add(ruleDTO.getRuleGroupId());				}			}		}		//根据ruleGroupId，批量修改属于ruleGroupId规则的所有记录的服务费为0		List<Boolean> re=new ArrayList<>();		List<ChargeStandardDTO> chargeStandardDTOList=new ArrayList<>();		ChargeStandardDTO chargeStandardDTO=new ChargeStandardDTO();		chargeStandardDTO.setPrice(0);		chargeStandardDTO.setCondition(1);		chargeStandardDTOList.add(chargeStandardDTO);		for(String ruleGroupIdTmp:ruleGroupId){			SxcServiceRule sxcServiceRule=new SxcServiceRule();			sxcServiceRule.setChargeStandard(JSON.toJSONString(chargeStandardDTOList));			SxcServiceRuleExample sxcServiceRuleExample=new SxcServiceRuleExample();			SxcServiceRuleExample.Criteria crSxcServiceRule=sxcServiceRuleExample.createCriteria();			crSxcServiceRule.andRuleGroupIdEqualTo(ruleGroupIdTmp);			Boolean bl=sxcServiceRuleRepository.updateByExampleSelective(sxcServiceRule,sxcServiceRuleExample);			re.add(bl);		}		return re.stream().anyMatch(x->x.equals(false))?false:true;	}}