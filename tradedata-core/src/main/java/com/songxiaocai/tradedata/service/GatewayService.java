package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 14:49 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-04-03日SXC All Rights Reserved. */import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.songxiaocai.tradedata.application.repository.SxcGatewayApiRepository;import com.songxiaocai.tradedata.config.dataSource.DataSourceTypeManager;import com.songxiaocai.tradedata.config.dataSource.DataSources;import com.songxiaocai.tradedata.service.params.SxcGatewayApiInfoDTO;import com.sxc.common.domain.result.Result;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;@Service@Slf4jpublic class GatewayService {	@Autowired	private SxcGatewayApiRepository sxcGatewayApiRepository;	public Result<String> modifyApiDefine(String apiName)  {		//1、先从开发环境查询出要修改的apiName		//2、修改对应的版本号		// 3、查询在稳定测试环境有无这个apiName		// 4、不存在则向稳定测试环境插入apiName，完成部署		//5、存在，则修改稳定测试环境数据		Result<String> result = new Result<String>();		DataSourceTypeManager.set(DataSources.dev);		SxcGatewayApiInfoDTO sxcGatewayApiInfoDTOdev = sxcGatewayApiRepository.getApiByName(apiName);		if (sxcGatewayApiInfoDTOdev == null) {			result.setSuccess(false);			result.setErrorMessage("apiName undefine");			result.setData(apiName);			return result;		}		String ApiDefinedev = sxcGatewayApiInfoDTOdev.getApiDefine();		DataSourceTypeManager.reset();		SxcGatewayApiInfoDTO sxcGatewayApiInfoDTOtestProd = sxcGatewayApiRepository.getApiByName(apiName);		if(sxcGatewayApiInfoDTOtestProd != null){			Boolean bl=sxcGatewayApiRepository.delete(apiName);			System.out.println("删除稳定测试环境apiName="+apiName+"成功"+bl);			SxcGatewayApiInfoDTO intestProd = new SxcGatewayApiInfoDTO();			HashMap<String, Object> in = Maps.newHashMap();			BeanUtils.copyProperties(sxcGatewayApiInfoDTOdev, intestProd);			String ApiDefinetestProd = ApiDefinedev.replace("1.0.0.daily", "1.0.0.test");			intestProd.setApiDefine(ApiDefinetestProd);			in.put("apiName", intestProd.getApiName());			in.put("apiDefine", intestProd.getApiDefine());			in.put("apiCallPermission", intestProd.getApiCallPermission());			in.put("apiTag", intestProd.getApiTag());			in.put("apiTag", intestProd.getApiTag());			result.setSuccess(sxcGatewayApiRepository.insert(in) == true ? true : false);			result.setErrorMessage("稳定测试环境部署成功");		}//		if (sxcGatewayApiInfoDTOtestProd != null) {////			String ApiDefinetestProd = sxcGatewayApiInfoDTOtestProd.getApiDefine();//			//修改版本号,向稳定测试环境////			HashMap<String, Object> replace = replaceVersion(apiName, ApiDefinetestProd);//			result.setSuccess(sxcGatewayApiRepository.updateByApiName(replace) == true ? true : false);//			result.setErrorMessage("稳定测试环境部署成功");////		}		else {			//向稳定测试环境插入数据			SxcGatewayApiInfoDTO intestProd = new SxcGatewayApiInfoDTO();			HashMap<String, Object> in = Maps.newHashMap();			BeanUtils.copyProperties(sxcGatewayApiInfoDTOdev, intestProd);			String ApiDefinetestProd = ApiDefinedev.replace("1.0.0.daily", "1.0.0.test");			intestProd.setApiDefine(ApiDefinetestProd);			in.put("apiName", intestProd.getApiName());			in.put("apiDefine", intestProd.getApiDefine());			in.put("apiCallPermission", intestProd.getApiCallPermission());			in.put("apiTag", intestProd.getApiTag());			in.put("apiTag", intestProd.getApiTag());			result.setSuccess(sxcGatewayApiRepository.insert(in) == true ? true : false);			result.setErrorMessage("稳定测试环境部署成功");		}		return result;	}	private HashMap<String, Object> replaceVersion(String apiName, String apiDefine) {		HashMap<String, Object> up = new HashMap<String, Object>();		HashMap<String, Object> hs = JSON.parseObject(apiDefine, HashMap.class);		JSONObject call = (JSONObject) hs.get("call");		Map<String, Object> callRe = call.getInnerMap();		String versiontestProd = "1.0.0.test";		if (!callRe.get("version").equals(versiontestProd)) {			callRe.put("version", versiontestProd);			hs.put("call", call);			up.put("apiName", apiName);			up.put("apiDefine", JSON.toJSONString(hs));		}		return up;	}}