package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 15:40 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-03-27日SXC All Rights Reserved. */import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.fastjson.JSON;import com.sxc.common.domain.result.Result;import com.sxc.gateway.client.GWPageResult;import com.sxc.gateway.client.GWResult;import com.sxc.jotunheim.itemservice.provider.group.GoodsGroupRelationProvider;import com.sxc.jotunheim.param.group.GoodsGroupRelationCreateDTO;import com.sxc.jotunheim.param.sku.DownSkuInfoPageQueryDTO;import com.sxc.jotunheim.provider.sku.DownSkuQueryProvider;import com.sxc.jotunheim.result.sku.DownSkuInfoDTO;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Component;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Service@Slf4jpublic class GoodsgroupService {	@Reference	DownSkuQueryProvider downSkuQueryProvider;	@Reference	GoodsGroupRelationProvider goodsGroupRelationProvider;	public Result<String> relationEdit(String skuIds, String addGroupIds, String deleteGroupIds,String operateId) {		GoodsGroupRelationCreateDTO goodsGroupRelationCreateDTO=new GoodsGroupRelationCreateDTO();		Result re = new Result();		try {			//商品分组			List<Integer> addGroupIdsDTO = new ArrayList<>();			if (StringUtils.isNotBlank(addGroupIds)) {				String[] addGroupIdsArray = addGroupIds.split(",");				for (String addGroupId : addGroupIdsArray) {					addGroupIdsDTO.add(Integer.valueOf(addGroupId));				}			}			//skuId增加关联商品分组			List<Integer> skuIdsDTO = new ArrayList<>();			if (StringUtils.isNotBlank(skuIds)) {				String[] skuIdsArray = skuIds.split(",");				for (String skuId : skuIdsArray) {					skuIdsDTO.add(Integer.valueOf(skuId));				}			}			//skuId去除关联商品分组			List<Integer> deleteGroupIdsDTO = new ArrayList<>();			if (StringUtils.isNotBlank(deleteGroupIds)) {				String[] deleteGroupIdsArray = deleteGroupIds.split(",");				for (String deleteGroupId : deleteGroupIdsArray) {					deleteGroupIdsDTO.add(Integer.valueOf(deleteGroupId));				}			}			goodsGroupRelationCreateDTO.setGroupIds(addGroupIdsDTO);			goodsGroupRelationCreateDTO.setTargetIds(skuIdsDTO);			goodsGroupRelationCreateDTO.setDeleteGroupIds(deleteGroupIdsDTO);			//后端接口业务代码		/*第一种情况，skuId集合在addGroupIds与deleteGroupIds（增加与删除的商品分组id不同），才能进行操作		targetIds有值		deleteGroupIds有值		addGroupIds有值		条件：deleteGroupIds与addGroupIds取交集=空		*/		/*		第二种情况，skuId集合在addGroupIds与deleteGroupIds（增加与删除的商品分组id一样），需要分步骤才能进行操作		1）、		targetIds有值		deleteGroupIds有值		addGroupIds无值		2）、		targetIds有值		deleteGroupIds无值		addGroupIds有值		*/			log.info("请求参数信息:" + JSON.toJSONString(goodsGroupRelationCreateDTO));			GWResult<Boolean> bl = goodsGroupRelationProvider.createGoodsGroupRelation(goodsGroupRelationCreateDTO, Integer.valueOf(operateId));			if (bl.isSuccess()) {				re.setSuccess(true);				re.setSuccessInfo("更改商品分组成功");			} else {				re.setSuccess(false);				re.setErrorMessage("更改商品分组失败");			}		}catch (Exception e){			log.error("商品分组修改异常", e);			re.setSuccess(false);			re.setErrorMessage("商品分组修改异常");			return re;		}		return re;	}	public Result<DownSkuInfoDTO> skuInfo(String groupIds, String currentPage, String pageSize) {		DownSkuInfoPageQueryDTO downSkuInfoPageQueryDTO=new DownSkuInfoPageQueryDTO();		List<Integer> groupIdsTemp=new ArrayList<>();		groupIdsTemp.add(21);		downSkuInfoPageQueryDTO.setGroupIds(groupIdsTemp);		downSkuInfoPageQueryDTO.setCurrentPage(1);		downSkuInfoPageQueryDTO.setPageSize(15);		GWPageResult<DownSkuInfoDTO> re=downSkuQueryProvider.pageDownSkuInfo(downSkuInfoPageQueryDTO);		Result result=new Result();		result.setData(re.getResult().getData());		return result;	}}