package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 20:13 * @author <a href="mailto:yangyi@zuozh.com">yangyi</a> * @Version JDK 1.7 * @since version 1.0 Copyright 2019-04-12日ZZJR All Rights Reserved. */import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Lists;import com.songxiaocai.tradedata.application.repository.SxcOrderRepository;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcOrder;import com.songxiaocai.tradedata.tool.http.HttpRequestSimple;import com.songxiaocai.tradedata.tool.jedis.JedisTemplate;import com.songxiaocai.tradedata.tool.map.MapUtil;import com.sxc.common.domain.result.Result;import com.sxc.jotunheim.trade.param.createorder.OrderItemCreateDTO;import com.sxc.jotunheim.trade.param.createorder.PlaceCreateDTO;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;@Service@Slf4jpublic class OrderService {	private final static LinkedHashMap<String, String> requrl = new LinkedHashMap<String, String>();	static {		requrl.put("songxiaocai.trade.pre.place.order", "https://gateway.songxiaocai.net/gw/api/songxiaocai.trade.pre.place.order");		requrl.put("songxiaocai.trade.place.order", "https://gateway.songxiaocai.net/gw/api/songxiaocai.trade.place.order");		requrl.put("songxiaocai.trade.queryPickAddressInfo", "https://gateway.songxiaocai.net/gw/api/songxiaocai.trade.queryPickAddressInfo");		requrl.put("songxiaocai.trade.pre.pay.order", "https://gateway.songxiaocai.net/gw/api/songxiaocai.trade.pre.pay.order");		requrl.put("songxiaocai.account.finance.queryById", "https://gateway.songxiaocai.net/gw/api/songxiaocai.account.finance.queryById");		requrl.put("songxiaocai.trade.pay.order", "https://gateway.songxiaocai.net/gw/api/songxiaocai.trade.pay.order");	}	private static Map<String, String> refMap = new HashMap<String, String>();	private static Map<String, Object> requestBodyCommonMap = new HashMap<String, Object>() {		{			put("appKey", "15325762");			put("bizCode", "songxiaocai_login");			put("clientSysName", "iOS");			put("clientSysVersion", "12.1.1");			put("clientVersion", "21");			put("deviceUUID", "04C0C1FA-18F0-48D6-9C75-47C66FEED4A6");		}	};	@Autowired	private HttpRequestSimple httpclent;	@Autowired	JedisTemplate jedisTemplate;	@Autowired	SxcOrderRepository sxcOrderRepository;	/**	 * 小B下单接口	 *	 * @param mobile	 * @return	 */	public Result<String> placeOrder(String mobile) {		Long timestamp = new Date().getTime();		Result result = new Result();		try {			Map<String, Object> hashmap = new HashMap<String, Object>();			hashmap.putAll(requestBodyCommonMap);			hashmap.put("mobilePhone", mobile);			hashmap.put("password", "12345");			Map<String, Object> keymap = new LinkedHashMap<>();			keymap.put("env", "testProd");			keymap.put("mobile", mobile);			keymap.put("bizCode", "songxiaocai_login");			keymap.put("appKey", "15325762");			String key = jedisTemplate.generateRedisKey(keymap);			String url = "https://gateway.songxiaocai.net/login/login";			log.info("小B用户登录请求报文:" + JSON.toJSONString(hashmap));			String resJson_login = httpclent.postSendHttpWeb(url, JSON.toJSONString(hashmap));			log.info("小B用户登录返回报文:" + resJson_login);			if (!resJson_login.contains("true")) {				result.setSuccess(false);				result.setErrorMessage("小B账户登陆失败！");				result.setData(resJson_login);				log.info("mobile: {}", mobile);				return result;			}			String sessionId = JSONObject.parseObject(resJson_login).getJSONObject("result").getString("sessionId");			String userId = JSONObject.parseObject(resJson_login).getJSONObject("result").getString("userId");			refMap.put("sessionId", sessionId);			refMap.put("userId", userId);			Map<String, String> cookie = new LinkedHashMap<String, String>();			cookie.put("SESSION", sessionId);			cookie.put("Domain", "songxiaocai.net");			cookie.put("Path", "/");			refMap.put("cookie", MapUtil.mapToCookie(cookie, ";"));			Boolean bl=jedisTemplate.hmset(key, refMap);			if(!bl){				result.setSuccess(false);				result.setErrorMessage("cookie写入失败！");				return result;			}			Map<String, Object> prePlaceOrder = new HashMap<String, Object>();			PlaceCreateDTO placeCreateDTO = new PlaceCreateDTO();			placeCreateDTO.setChannelType(1);			placeCreateDTO.setSourceType(2);			List<OrderItemCreateDTO> items = Lists.newArrayList();			OrderItemCreateDTO orderItemCreateDTO1 = new OrderItemCreateDTO();			orderItemCreateDTO1.setItemId(9478);			orderItemCreateDTO1.setNum(3);			items.add(orderItemCreateDTO1);			OrderItemCreateDTO orderItemCreateDTO2 = new OrderItemCreateDTO();			orderItemCreateDTO2.setItemId(10039);			orderItemCreateDTO2.setNum(4);			items.add(orderItemCreateDTO2);			OrderItemCreateDTO orderItemCreateDTO3 = new OrderItemCreateDTO();			orderItemCreateDTO3.setItemId(10366);			orderItemCreateDTO3.setNum(5);			items.add(orderItemCreateDTO3);			OrderItemCreateDTO orderItemCreateDTO4 = new OrderItemCreateDTO();			orderItemCreateDTO4.setItemId(18548);			orderItemCreateDTO4.setNum(2);			items.add(orderItemCreateDTO4);			placeCreateDTO.setItems(items);			String prePlaceCreateDTO = "{\"channelType\":1,\"sourceType\":2,\"buyerId\":null,\"items\":[{\"itemId\":9478,\"num\":3},{\"itemId\":10039,\"num\":4},{\"itemId\":10366,\"num\":5},{\"itemId\":18548,\"num\":2}]}";			//prePlaceOrder.put("placeCreateDTO", JSON.toJSONString(placeCreateDTO));			prePlaceOrder.putAll(requestBodyCommonMap);			prePlaceOrder.put("placeCreateDTO", prePlaceCreateDTO);			prePlaceOrder.put("timestamp", timestamp);			String url_prePlaceOrder = requrl.get("songxiaocai.trade.pre.place.order");			log.info("预下单请求报文:" + MapUtil.mapToRequestBody(prePlaceOrder));			String resJson_prePlaceOrder = httpclent.postSendHttpApi(url_prePlaceOrder, jedisTemplate.hget(key, "cookie").toString(), MapUtil.mapToRequestBody(prePlaceOrder));			log.info("预下单返回报文:" + resJson_prePlaceOrder);			if (!resJson_prePlaceOrder.contains("true")) {				result.setSuccess(false);				result.setErrorMessage("预下单失败！");				result.setData(resJson_prePlaceOrder);				return result;			}			Map<String, Object> PlaceOrder = new HashMap<String, Object>();			String placeOrder = "{\"buyerId\":null,\"channelType\":1,\"sourceType\":2,\"tieInItems\":[],\"items\":[{\"itemId\":9478,\"num\":3},{\"itemId\":10039,\"num\":4},{\"itemId\":10366,\"num\":5},{\"itemId\":18548,\"num\":2}]}";			PlaceOrder.put("placeCreateDTO", placeOrder);			PlaceOrder.put("timestamp", timestamp);			PlaceOrder.putAll(requestBodyCommonMap);			String url_PlaceOrder = requrl.get("songxiaocai.trade.place.order");			log.info("下单请求报文:" + MapUtil.mapToRequestBody(PlaceOrder));			String resJson_PlaceOrder = httpclent.postSendHttpApi(url_PlaceOrder, jedisTemplate.hget(key, "cookie").toString(), MapUtil.mapToRequestBody(PlaceOrder));			log.info("下单返回报文:" + resJson_PlaceOrder);			if (!resJson_PlaceOrder.contains("true")) {				result.setSuccess(false);				result.setErrorMessage("下单失败！");				result.setData(resJson_PlaceOrder);				return result;			}			String orderNo = JSONObject.parseObject(resJson_PlaceOrder).getJSONObject("response").getString("orderNo");			refMap.put("orderNo", orderNo);			jedisTemplate.hmset(key, refMap);			Map<String, Object> queryPickAddressInfo = new HashMap<String, Object>();			queryPickAddressInfo.putAll(requestBodyCommonMap);			queryPickAddressInfo.put("timestamp", timestamp);			String url_queryPickAddressInfo = requrl.get("songxiaocai.trade.queryPickAddressInfo");			log.info("获取小B提货地点请求报文:" + MapUtil.mapToRequestBody(queryPickAddressInfo));			String resJson_queryPickAddressInfo = httpclent.postSendHttpApi(url_queryPickAddressInfo, jedisTemplate.hget(key, "cookie").toString(), MapUtil.mapToRequestBody(queryPickAddressInfo));			log.info("获取小B提货地点返回报文:" + resJson_queryPickAddressInfo);			if (!resJson_queryPickAddressInfo.contains("true")) {				result.setSuccess(false);				result.setErrorMessage("获取小B提货地点失败！");				result.setData(resJson_queryPickAddressInfo);				return result;			}			Map<String, Object> payOrderDTO = new HashMap<String, Object>();			payOrderDTO.put("orderNo", jedisTemplate.hget(key, "orderNo").toString());			payOrderDTO.put("autoSelectedCouponsUser", true);			Map<String, Object> prePayOrder = new HashMap<String, Object>();			prePayOrder.putAll(requestBodyCommonMap);			prePayOrder.put("payOrderDTO", JSON.toJSONString(payOrderDTO));			prePayOrder.put("timestamp", timestamp);			String url_prePayOrder = requrl.get("songxiaocai.trade.pre.pay.order");			log.info("获得订单付款金额明细请求报文:" + MapUtil.mapToRequestBody(prePayOrder));			String resJson_prePayOrder = httpclent.postSendHttpApi(url_prePayOrder, jedisTemplate.hget(key, "cookie").toString(), MapUtil.mapToRequestBody(prePayOrder));			log.info("获得订单付款金额明细返回报文:" + resJson_prePayOrder);			if (!resJson_prePayOrder.contains("true")) {				result.setSuccess(false);				result.setErrorMessage("获得订单付款金额明细失败！");				result.setData(resJson_prePayOrder);				return result;			}			Map<String, Object> accountFinanceQueryById = new HashMap<String, Object>();			accountFinanceQueryById.putAll(requestBodyCommonMap);			accountFinanceQueryById.put("operatorUserId", jedisTemplate.hget(key, "userId").toString());			accountFinanceQueryById.put("timestamp", timestamp);			String url_accountFinanceQueryById = requrl.get("songxiaocai.account.finance.queryById");			log.info("账户资金查询请求报文:" + MapUtil.mapToRequestBody(accountFinanceQueryById));			String resJson_accountFinanceQueryById = httpclent.postSendHttpApi(url_accountFinanceQueryById, jedisTemplate.hget(key, "cookie").toString(), MapUtil.mapToRequestBody(accountFinanceQueryById));			log.info("账户资金查询返回报文:" + resJson_accountFinanceQueryById);			if (!resJson_accountFinanceQueryById.contains("true")) {				result.setSuccess(false);				result.setErrorMessage("账户资金查询失败！");				result.setData(resJson_accountFinanceQueryById);				return result;			}			Map<String, Object> payOrderDTOTradePayOrder = new HashMap<String, Object>();			String selectedCouponsUserIds = "[585,586,587,588,589,590,591]";			payOrderDTOTradePayOrder.put("orderNo", orderNo);			payOrderDTOTradePayOrder.put("selectedCouponsUserIds", JSON.parse(selectedCouponsUserIds));			payOrderDTOTradePayOrder.put("payType", "1");			Map<String, Object> tradePayOrder = new HashMap<String, Object>();			tradePayOrder.putAll(requestBodyCommonMap);			tradePayOrder.put("payOrderDTO", JSON.toJSONString(payOrderDTOTradePayOrder));			tradePayOrder.put("timestamp", timestamp);			String url_tradePayOrder = requrl.get("songxiaocai.trade.pay.order");			log.info("付款请求报文:" + MapUtil.mapToRequestBody(tradePayOrder));			String resJson_tradePayOrder = httpclent.postSendHttpApi(url_tradePayOrder, jedisTemplate.hget(key, "cookie").toString(), MapUtil.mapToRequestBody(tradePayOrder));			log.info("付款返回报文:" + resJson_tradePayOrder);			result.setData(resJson_tradePayOrder);			if (!resJson_tradePayOrder.contains("true")) {				result.setSuccess(false);				result.setErrorMessage("付款返回失败！");				result.setData(resJson_tradePayOrder);				return result;			}		} catch (Exception e) {			log.error("小B用户下单且付款成功异常", e);			result.setErrorMessage("小B用户下单且付款成功异常");			result.setSuccess(false);			result.setE(e);		}		result.setSuccess(true);		result.setSuccessInfo("付款成功！");		return result;	}	/**	 *清理小B用户的历史订单	 * @param buyerId	 * @param state	 * @return	 */	public Result<String> modifyOrderStatus(Integer buyerId, Integer state) {		Result result = new Result();		try {			List<SxcOrder> list = sxcOrderRepository.getByBuyerId(buyerId);			if ( !list.isEmpty() ) {					Boolean bl = sxcOrderRepository.modifyState(buyerId, state);					if(!bl){						result.setSuccess(false);						result.setErrorMessage("清理小B用户的历史订单失败！");						return result;					}				result.setSuccess(true);				result.setSuccessInfo("清理小B用户的历史订单成功！");				return result;			}			result.setSuccess(false);			result.setErrorMessage("该小B用户没有需要清理的历史订单");			return result;		} catch (Exception e) {			log.info("清理小B用户的历史订单异常",e);			result.setSuccess(false);			result.setErrorMessage("清理小B用户的历史订单异常！");			result.setE(e);		}		return result;	}}