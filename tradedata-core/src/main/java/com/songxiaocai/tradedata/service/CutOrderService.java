package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 13:48 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-03-18日SXC All Rights Reserved. */import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.songxiaocai.tradedata.application.repository.SxcBuyerRepository;import com.songxiaocai.tradedata.application.repository.SxcItemSkuRepository;import com.songxiaocai.tradedata.application.repository.SxcStorehouseRepository;import com.songxiaocai.tradedata.application.repository.SxcUserRepository;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcItemSku;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcStorehouse;import com.songxiaocai.tradedata.service.params.SxcBuyerInfoDTO;import com.songxiaocai.tradedata.service.params.SxcItemSkuDTO;import com.songxiaocai.tradedata.service.params.SxcStorehouseInfoDTO;import com.songxiaocai.tradedata.service.params.SxcUserInfoDTO;import com.songxiaocai.tradedata.tool.date.DateTool;import com.songxiaocai.tradedata.tool.http.HttpRequestSimple;import com.songxiaocai.tradedata.tool.jedis.JedisTemplate;import com.songxiaocai.tradedata.tool.map.MapUtil;import com.sxc.common.domain.result.Result;import com.sxc.midgard.activitydubbo.constant.enums.CouponRangeTypeEnum;import com.sxc.midgard.activitydubbo.params.coupon.CouponDTO;import com.sxc.midgard.activitydubbo.params.coupon.GiveOutDTO;import com.sxc.midgard.activitydubbo.params.coupon.OrderInfoDTO;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Component@Slf4jpublic class CutOrderService {	@Autowired	private SxcStorehouseRepository sxcStorehouseRepository;	@Autowired	private SxcItemSkuRepository sxcItemSkuRepository;	@Autowired	private SxcUserRepository sxcUserRepository;	@Autowired	private SxcBuyerRepository sxcBuyerRepository;	/*	修改截单时间为23:59:59	 */	public Result<String> modifyCutOffTime(String mobile,Integer ItemId){		Result<String> re=new Result<>();		if(!StringUtils.isNotBlank(mobile) && !StringUtils.isNotBlank(String.valueOf(ItemId))){			re.setSuccess(false);			re.setErrorMessage("参数不为空");			log.info("参数不为空mobile = {} ,ItemId = {}",mobile,ItemId);			return re;		}		String cutOffTime="23:59:59";		SxcBuyerInfoDTO sxcBuyerInfoDTO=null;		int num_sxcStorehouse=-1;        //修改小B所属服务站截单时间		SxcUserInfoDTO sxcUserInfoDTO=sxcUserRepository.getByMobilePhone(mobile);		if(sxcUserInfoDTO!=null ){			sxcBuyerInfoDTO=sxcBuyerRepository.getByBuyerUserId(sxcUserInfoDTO.getUserId());		}else {			re.setSuccess(false);			re.setErrorMessage("查询不到用户信息");			return re;		}		if(sxcBuyerInfoDTO!=null ){			num_sxcStorehouse=sxcStorehouseRepository.modifyCutffTime(cutOffTime,sxcBuyerInfoDTO.getBuyerStorehouseId());		}else {			re.setSuccess(false);			re.setErrorMessage("查询不到买家信息");			return re;		}		//修改小B下单SkuId的截单时间		List<SxcItemSku> sxcItemSku=sxcItemSkuRepository.getByItemId(ItemId);        if (CollectionUtils.isEmpty(sxcItemSku)){			re.setErrorMessage("未查询到该ItemId="+ItemId);			re.setSuccess(false);			return re;        }		SxcItemSkuDTO sxcItemSkuDTO=new SxcItemSkuDTO();		sxcItemSku.forEach(ss->{			BeanUtils.copyProperties(ss,sxcItemSkuDTO);		});		Map<String,String> maps = (Map)JSON.parse(sxcItemSkuDTO.getFeatures());		maps.put("cutoffTime",cutOffTime);		String features=JSON.toJSONString(maps);		int  num_sxcItemSku=sxcItemSkuRepository.modifyCutffTime(features,ItemId);		try{			if(num_sxcStorehouse<=0 && num_sxcItemSku<=0){				re.setSuccess(false);				re.setErrorMessage("服务站截单时间或者商品表截单时间修改失败");				return re;			}			log.info("");		}catch (Exception e){			log.error("修改截单错误: {}", e);			re.setSuccess(false);			re.setErrorMessage("修改截单失败");			return re;		}		re.setData("修改截单成功");		re.setSuccess(true);		return re;	}}