package com.songxiaocai.tradedata.service;/* * Description:com.songxiaocai.tradedata.service * @Date Create on 10:40 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-03-19日SXC All Rights Reserved. */import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.serializer.SerializerFeature;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.songxiaocai.tradedata.application.repository.SxcUserRepository;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcUser;import com.songxiaocai.tradedata.service.params.SxcUserInfoDTO;import com.songxiaocai.tradedata.tool.encr.MD5Utils;import com.songxiaocai.tradedata.tool.http.HttpRequestSimple;import com.songxiaocai.tradedata.tool.jedis.JedisTemplate;import com.songxiaocai.tradedata.tool.map.MapUtil;import com.sxc.common.domain.result.Result;import com.sxc.ssp.adpater.params.buyer.BuyerEditDTO;import com.sxc.ssp.adpater.params.buyer.CatManageEditDTO;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.stereotype.Service;import java.util.*;@Service@Slf4jpublic class UserService {	@Autowired	private HttpRequestSimple httpclent;	@Autowired	JedisTemplate jedisTemplate;	@Autowired	private SxcUserRepository sxcUserRepository;	@Autowired	private CouponsService couponsService;	private final static LinkedHashMap<String, String> requrl = new LinkedHashMap<String, String>();	private static Map<String, String> refMap = new HashMap<String, String>();	private static Map<String, Object> requestBodyCommonMap = new HashMap<String, Object>() {		{			put("appKey", "31125233");			put("clientSysName", "iOS");			put("clientSysVersion", "12.1.1");			put("clientVersion", "12");			put("deviceUUID", "04C0C1FA-18F0-48D6-9C75-47C66FEED4A6");		}	};	static {		requrl.put("songxiaocai.ssp.customer.save", "https://gateway.songxiaocai.net/gw/api/songxiaocai.ssp.customer.save");		requrl.put("roleRelationship.roleSave", "https://erp.songxiaocai.net/roleRelationship/roleSave.do");		requrl.put("roleRelationship.changeRoleRelationship", "https://erp.songxiaocai.net/roleRelationship/changeRoleRelationship.do");		requrl.put("songxiaocai.permission.userPermissionRelation.add", "https://gateway.songxiaocai.net/gw/api/songxiaocai.permission.userPermissionRelation.add");	}	public Result<SxcUserInfoDTO> getUser(String mobile) {		Result<SxcUserInfoDTO> re = new Result<>();		SxcUserInfoDTO sxcUserInfoDTO = null;		try {			HashMap<String, Object> hs =new HashMap<String, Object>();			hs.put("mobilePhone",mobile);			hs.put("userType",1);			sxcUserInfoDTO = sxcUserRepository.getByMobilePhone(hs);			Integer userId = sxcUserInfoDTO.getUserId();			if (sxcUserInfoDTO != null && StringUtils.isNotBlank(String.valueOf(userId))) {				re.setData(sxcUserInfoDTO);			} else {				re.setSuccess(false);				re.setErrorMessage("查询不到用户信息");				return re;			}		} catch (Exception e) {			log.error("查询用户异常: {}", e);			re.setSuccess(false);			re.setErrorMessage("查询用户异常");			return re;		}		re.setSuccess(true);		return re;	}	/**	 * 快速生成小B用户	 * 测试数据:	 * 登陆手机号码：19900000088	 * @param defaultBusinessMobile	 * @param	 * @return	 */	public Result<String> saveBusinessUser(String defaultBusinessMobile, String saleMobile, String defaultBusinessUserName) {		Result<String> result = new Result<>();		SxcUserInfoDTO sxcUserInfoDTO = null;		try {			HashMap<String, Object> hs =new HashMap<String, Object>();			hs.put("mobilePhone",defaultBusinessMobile);			hs.put("userType",1);			sxcUserInfoDTO = sxcUserRepository.getByMobilePhone(hs);			if (sxcUserInfoDTO != null) {				Integer userId = sxcUserInfoDTO.getUserId();				if (StringUtils.isNotBlank(String.valueOf(userId))) {					result.setSuccess(false);					result.setErrorMessage("该小B的手机号码已被注册");					return result;				}			} else {				try {					Map<String, Object> hashmapLongin = new HashMap<String, Object>();					hashmapLongin.putAll(requestBodyCommonMap);					requestBodyCommonMap.remove("clientSysName");					requestBodyCommonMap.remove("clientSysVersion");					requestBodyCommonMap.remove("clientVersion");					if (StringUtils.isAllBlank(saleMobile) || saleMobile == null || saleMobile.trim().isEmpty()) {						saleMobile = "19900000088";					}					hashmapLongin.put("mobilePhone", saleMobile);					hashmapLongin.put("password", "12345");					hashmapLongin.put("bizCode", "songxiaofu_login");					Map<String, Object> keymap = new LinkedHashMap<>();					keymap.put("env", "testProd");					keymap.put("mobile", saleMobile);					keymap.put("bizCode", "songxiaofu_login");					keymap.put("appKey", "31125233");					String key = jedisTemplate.generateRedisKey(keymap);					String url = "https://gateway.songxiaocai.net/login/login";					log.info("宋小福登录请求报文:" + JSON.toJSONString(hashmapLongin));					String resJson_login = httpclent.postSendHttpWeb(url, JSON.toJSONString(hashmapLongin));					log.info("宋小福登录返回报文:" + resJson_login);					if (!resJson_login.contains("true")) {						result.setSuccess(false);						result.setErrorMessage("销售人员账户登陆宋小福失败！");						result.setData(resJson_login);						log.info("saleMobile: {}", saleMobile);						return result;					}					String sessionId = JSONObject.parseObject(resJson_login).getJSONObject("result").getString("sessionId");					String userId = JSONObject.parseObject(resJson_login).getJSONObject("result").getString("userId");					refMap.put("sessionId", sessionId);					refMap.put("userId", userId);					Map<String, String> cookie = new LinkedHashMap<String, String>();					cookie.put("SESSION", sessionId);					cookie.put("Domain", "songxiaocai.net");					cookie.put("Path", "/");					refMap.put("cookie", MapUtil.mapToCookie(cookie, ";"));					Boolean bl = jedisTemplate.hmset(key, refMap);					if (!bl) {						result.setSuccess(false);						result.setErrorMessage("cookie写入失败！");						return result;					}					Long timestamp = new Date().getTime();					String businessUserName = null;					String businessMobile=null;					if (StringUtils.isAllBlank(defaultBusinessUserName) || defaultBusinessUserName == null) {						businessUserName = "test" + jedisTemplate.incr("testProd".concat("businessUserName"), 1);					} else {						businessUserName = defaultBusinessUserName;					}					if(StringUtils.isAllBlank(defaultBusinessMobile) || defaultBusinessMobile==null || defaultBusinessMobile.trim().isEmpty())					{						while (true){							Long businessMobile_ = 13000000000L + jedisTemplate.incr("testProd".concat("businessMobile"), 1);							businessMobile=String.valueOf(businessMobile_);							HashMap<String, Object> hsNew =new HashMap<String, Object>();							hsNew.put("mobilePhone",businessMobile);							hsNew.put("userType",1);							sxcUserInfoDTO = sxcUserRepository.getByMobilePhone(hsNew);							if(sxcUserInfoDTO ==null){								break;							}						}					}else {						businessMobile=defaultBusinessMobile;					}					BuyerEditDTO buyerEditDTO = new BuyerEditDTO();					buyerEditDTO.setSex(1);					buyerEditDTO.setBuyerName(businessUserName);					buyerEditDTO.setMobilePhone(businessMobile);					buyerEditDTO.setStorehouseId(89);					buyerEditDTO.setStallAddress("12345");					buyerEditDTO.setIdCardFront("http://sxc-item.oss-cn-hangzhou.aliyuncs.com/focus/item/2019-04-24-17-39-26-65955.jpeg");					buyerEditDTO.setIdCardBack("http://sxc-item.oss-cn-hangzhou.aliyuncs.com/focus/item/2019-04-24-17-39-33-57654.jpeg");					buyerEditDTO.setHoldIdCard("http://sxc-item.oss-cn-hangzhou.aliyuncs.com/focus/item/2019-04-24-17-39-39-66338.jpeg");					buyerEditDTO.setSupplyChannelIds(new ArrayList<Integer>() {						{							add(3);						}					});					buyerEditDTO.setAccessChannels(new ArrayList<Integer>() {						{							add(1);						}					});					buyerEditDTO.setDownstreamCustomers(new ArrayList<Integer>() {						{							add(50);						}					});					List<CatManageEditDTO> catManageInfos = new ArrayList();					CatManageEditDTO catManageEditDTO1 = new CatManageEditDTO();					catManageEditDTO1.setCatId(108);					catManageEditDTO1.setThroughputForJian("-");					catManageEditDTO1.setThroughputForTon("-");					CatManageEditDTO catManageEditDTO2 = new CatManageEditDTO();					catManageEditDTO2.setCatId(121);					catManageEditDTO2.setThroughputForJian("-");					catManageEditDTO2.setThroughputForTon("-");					CatManageEditDTO catManageEditDTO3 = new CatManageEditDTO();					catManageEditDTO3.setCatId(148);					catManageEditDTO3.setThroughputForJian("-");					catManageEditDTO3.setThroughputForTon("-");					CatManageEditDTO catManageEditDTO4 = new CatManageEditDTO();					catManageEditDTO4.setCatId(152);					catManageEditDTO4.setThroughputForJian("-");					catManageEditDTO4.setThroughputForTon("-");					catManageInfos.add(catManageEditDTO1);					buyerEditDTO.setCatManageInfos(catManageInfos);					Map<String, Object> hashmap = new HashMap<String, Object>();					hashmap.putAll(requestBodyCommonMap);					hashmap.put("timestamp", timestamp);					hashmap.put("clientSysName", "iOS");					hashmap.put("clientSysVersion", "12.1.1");					hashmap.put("clientVersion", "12");					hashmap.put("buyerEditDTO", JSON.toJSONString(buyerEditDTO, SerializerFeature.WriteMapNullValue));					String url_customerSave = requrl.get("songxiaocai.ssp.customer.save");					log.info("小B注册请求报文:" + MapUtil.mapToRequestBody(hashmap));					String resJson_customerSave = httpclent.postSendHttpApi(url_customerSave, jedisTemplate.hget(key, "cookie").toString(), MapUtil.mapToRequestBody(hashmap));					log.info("小B注册返回报文:" + resJson_customerSave);					result.setData(resJson_customerSave);					if (!resJson_customerSave.contains("true")) {						result.setSuccess(false);						result.setErrorMessage("小B用户注册失败！");						result.setData(resJson_customerSave);						return result;					}					result.setSuccess(true);					result.setData(resJson_customerSave);					result.setSuccessInfo("小B用户注册成功 手机号码="+businessMobile+"  密码=12345");					SxcUser sxcUser = new SxcUser();					sxcUser.setMobilePhone(businessMobile);					sxcUser.setPassword(MD5Utils.getMD5("12345"));					sxcUser.setUserType(1);					List list = Lists.newArrayList();					list.add(sxcUser);					if (!sxcUserRepository.updatePassword(list)) {						result.setSuccess(false);						result.setErrorMessage("小B用户密码重置失败！");						return result;					}				} catch (Exception e) {					result.setSuccess(false);					result.setErrorMessage("小B用户注册异常");					return result;				}			}		} catch (Exception e) {			log.error("小B用户查询异常: {}", e);			result.setSuccess(false);			result.setErrorMessage("小B用户查询异常");			return result;		}		return result;	}	/**	 * 快速生成内部用户	 *	 * @param defaultInnerUserName 内部用户	 * @param roleIdS       角色标签	 * @return	 */	public Result<String> saveInnerUserwhenNotExist(String defaultInnerMobilePhone,String defaultInnerUserName, String roleIdS) {		Result<String> result = new Result<>();		SxcUserInfoDTO sxcUserInfoDTO = null;		try {			HashMap<String, Object> hs =new HashMap<String, Object>();			hs.put("mobilePhone",defaultInnerMobilePhone);			hs.put("userType",2);			sxcUserInfoDTO = sxcUserRepository.getByMobilePhone(hs);			if (sxcUserInfoDTO != null) {				Integer userId = sxcUserInfoDTO.getUserId();				if (StringUtils.isNotBlank(String.valueOf(userId))) {					result.setSuccess(false);					result.setErrorMessage("手机号码已被注册");					return result;				}			} else {				try {					String cookie = "SESSION=".concat(String.valueOf(jedisTemplate.get(couponsService.getCookie())));					String innerMobilePhone = null;					String innerUserName = null;					if (StringUtils.isAllBlank(defaultInnerUserName) || defaultInnerUserName == null || defaultInnerUserName.trim().isEmpty()) {						innerUserName = "innerTest" + jedisTemplate.incr("testProd".concat("innerUserName"), 1);					} else {						innerUserName = defaultInnerUserName;					}					if (StringUtils.isAllBlank(defaultInnerMobilePhone) || defaultInnerMobilePhone == null || defaultInnerMobilePhone.trim().isEmpty()) {						while (true){							Long innerMobilePhone_ = 13000000000L + jedisTemplate.incr("testProd".concat("innerMobilePhone"), 1);							innerMobilePhone=String.valueOf(innerMobilePhone_);							HashMap<String, Object> hsNew =new HashMap<String, Object>();							hsNew.put("mobilePhone",innerMobilePhone);							hsNew.put("userType",2);							sxcUserInfoDTO = sxcUserRepository.getByMobilePhone(hsNew);							if(sxcUserInfoDTO ==null){								break;							}						}					} else {						innerMobilePhone = defaultInnerMobilePhone;					}					String password = "12345";					String confirmPassword = "12345";					String userId = null;					String email = null;					String province = "浙江";					String city = "杭州市-330100";					String centerhouseId = "0";					String pickHouseId = "0";					Map<String, Object> hashmap = new HashMap<String, Object>();					hashmap.put("userId", userId);					if (StringUtils.isAllBlank(roleIdS) || roleIdS == null || roleIdS.trim().isEmpty()) {						roleIdS="2,";					}					hashmap.put("roleIdStr", roleIdS);					hashmap.put("userName", innerUserName);					hashmap.put("email", email);					hashmap.put("mobilePhone", defaultInnerMobilePhone);					hashmap.put("password", password);					hashmap.put("confirmPassword", confirmPassword);					hashmap.put("province", province);					hashmap.put("city", city);					hashmap.put("centerhouseId", centerhouseId);					hashmap.put("pickHouseId", pickHouseId);					String url_innerUserName = requrl.get("roleRelationship.roleSave");					log.info("创建内部账户请求报文:" + MapUtil.mapToRequestBody(hashmap));					String resJson_innerUserName = httpclent.postSendHttpApi(url_innerUserName, cookie, MapUtil.mapToRequestBody(hashmap));					log.info("创建内部账户返回报文:" + resJson_innerUserName);					result.setData(resJson_innerUserName);					if (!resJson_innerUserName.contains("创建成功")) {						result.setSuccess(false);						result.setErrorMessage("创建内部账户失败");						result.setData(resJson_innerUserName);						return result;					}					result.setSuccess(true);					result.setData(resJson_innerUserName);					result.setSuccessInfo("创建内部账户成功");					HashMap<String, Object> hsinner =new HashMap<String, Object>();					hsinner.put("mobilePhone",innerMobilePhone);					hsinner.put("userType",2);					SxcUserInfoDTO sxcUserInfoDTOinnerMobilePhone=sxcUserRepository.getByMobilePhone(hsinner);					if(sxcUserInfoDTOinnerMobilePhone==null){						result.setSuccess(false);						result.setErrorMessage("内部账户未查询到该记录");						return result;					}					Integer innerUserId=sxcUserInfoDTOinnerMobilePhone.getUserId();					Map<String, Object> hashmapBaseMemu = new HashMap<String, Object>();					hashmapBaseMemu.put("appKey", "68271344");					hashmapBaseMemu.put("bizCode", "authority_system_login");					hashmapBaseMemu.put("clientSysName", "chrome");					hashmapBaseMemu.put("clientSysVersion", "73.0.3683.103");					hashmapBaseMemu.put("clientVersion", "OS+X+10.14");					hashmapBaseMemu.put("deviceUUID", "28b228165cf4273a7c92f42ad3e2e661");					hashmapBaseMemu.put("userId", innerUserId);					ArrayList<Integer> listMenu=new ArrayList();					//菜单列表:797，区域架构列表：481，修改密码：88，用户角色管理：8，用户角色编辑:46					listMenu.add(797);					listMenu.add(481);					listMenu.add(88);					listMenu.add(8);					listMenu.add(46);					for(int i=0;i<4;i++){					hashmapBaseMemu.put("permissionId", listMenu.get(i));					String url_InnerBaseMemu = requrl.get("songxiaocai.permission.userPermissionRelation.add");					log.info("内部账户添加基础菜单请求报文 i="+i + MapUtil.mapToRequestBody(hashmapBaseMemu));					String resJson_InnerBaseMemu = httpclent.getSendHttp(url_InnerBaseMemu.concat("?").concat(MapUtil.mapToRequestBody(hashmapBaseMemu)),cookie);					log.info("内部账户添加基础菜单请求报文 i=" +i + resJson_InnerBaseMemu);					if (!resJson_InnerBaseMemu.contains("true")) {						result.setSuccess(false);						result.setErrorMessage("内部账户添加基础菜单失败");						result.setData(resJson_InnerBaseMemu);						break;					}					result.setSuccess(true);					result.setData(resJson_InnerBaseMemu);					result.setSuccessInfo("内部账户添加基础菜单成功");					}					if(!result.isSuccess()){						return result;					}					HashMap<String, Object> hashmapAddRole=new HashMap<String, Object>();					hashmapAddRole.put("userId", innerUserId);					hashmapAddRole.put("roleIdStr", roleIdS);					hashmapAddRole.put("userName", sxcUserInfoDTOinnerMobilePhone.getUserName());					hashmapAddRole.put("email", null);					hashmapAddRole.put("mobilePhone", sxcUserInfoDTOinnerMobilePhone.getMobilePhone());					hashmapAddRole.put("password", null);					hashmapAddRole.put("confirmPassword", null);					hashmapAddRole.put("province", province);					hashmapAddRole.put("city", city);					hashmapAddRole.put("ck_city", "-1");					hashmapAddRole.put("centerhouseId", centerhouseId);					hashmapAddRole.put("pickHouseId", pickHouseId);					String[] roleIds=roleIdS.split(",");					for(String roleId:roleIds){						if(roleId.equals(2)){							hashmapAddRole.put("isSaler", true);						}					}					String url_innerUserNameRole = requrl.get("roleRelationship.changeRoleRelationship");					log.info("内部账户关联角色请求报文:" + MapUtil.mapToRequestBody(hashmapAddRole));					String resJson_innerUserNameRole = httpclent.postSendHttpApi(url_innerUserNameRole, cookie, MapUtil.mapToRequestBody(hashmapAddRole));					log.info("内部账户关联角色返回报文:" + resJson_innerUserNameRole);					result.setData(resJson_innerUserNameRole);					if (!resJson_innerUserNameRole.contains("操作成功")) {						result.setSuccess(false);						result.setErrorMessage("内部账户关联角色失败");						result.setData(resJson_innerUserNameRole);						return result;					}					result.setSuccess(true);					result.setData(resJson_innerUserNameRole);					result.setSuccessInfo("内部账户关联角色成功");				} catch (Exception e) {					result.setSuccess(false);					result.setErrorMessage("内部账户操作异常");					return result;				}			}		} catch (Exception e) {			log.error("内部账户手机号码查找异常: {}", e);			result.setSuccess(false);			result.setErrorMessage("内部账户手机号码查找异常");			return result;		}		return result;	}	public Result<String> editInnerUser(String defaultInnerMobilePhone, String roleIdS) {		Result<String> result = new Result<>();		HashMap<String, Object> hsinner =new HashMap<String, Object>();		hsinner.put("mobilePhone",defaultInnerMobilePhone);		hsinner.put("userType",2);		SxcUserInfoDTO sxcUserInfoDTOinnerMobilePhone=sxcUserRepository.getByMobilePhone(hsinner);		String province = "浙江";		String city = "杭州市-330100";		HashMap<String, Object> hashmapAddRole=new HashMap<String, Object>();		hashmapAddRole.put("userId", sxcUserInfoDTOinnerMobilePhone.getUserId());		hashmapAddRole.put("roleIdStr", roleIdS);		hashmapAddRole.put("userName", sxcUserInfoDTOinnerMobilePhone.getUserName());		hashmapAddRole.put("email", null);		hashmapAddRole.put("mobilePhone", sxcUserInfoDTOinnerMobilePhone.getMobilePhone());		hashmapAddRole.put("password", null);		hashmapAddRole.put("confirmPassword", null);		hashmapAddRole.put("province", province);		hashmapAddRole.put("city", city);		hashmapAddRole.put("ck_city", "-1");		hashmapAddRole.put("centerhouseId", 0);		hashmapAddRole.put("pickHouseId", 0);		String[] roleIds=roleIdS.split(",");		for(String roleId:roleIds){			if(roleId.equals(2)){				hashmapAddRole.put("isSaler", true);			}		}		String cookie = "SESSION=".concat(String.valueOf(jedisTemplate.get(couponsService.getCookie())));		String url_innerUserNameRole = requrl.get("roleRelationship.changeRoleRelationship");		log.info("内部账户关联角色请求报文:" + MapUtil.mapToRequestBody(hashmapAddRole));		String resJson_innerUserNameRole = httpclent.postSendHttpApi(url_innerUserNameRole, cookie, MapUtil.mapToRequestBody(hashmapAddRole));		log.info("内部账户关联角色返回报文:" + resJson_innerUserNameRole);		result.setData(resJson_innerUserNameRole);		if (!resJson_innerUserNameRole.contains("操作成功")) {			result.setSuccess(false);			result.setErrorMessage("内部账户关联角色失败");			result.setData(resJson_innerUserNameRole);			return result;		}		result.setSuccess(true);		result.setData(resJson_innerUserNameRole);		result.setSuccessInfo("内部账户关联角色成功");		return result;	}	}