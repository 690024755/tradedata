package com.songxiaocai.tradedata.test.dubboTest;/* * Description:com.songxiaocai.tradedata.test.dubboTest * @Date Create on 17:32 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-02-22日SXC All Rights Reserved. */import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;import com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;import com.alibaba.fastjson.JSON;import com.songxiaocai.tradedata.service.BalanceService;import com.songxiaocai.tradedata.service.OrderService;import com.sxc.gateway.client.GWListResult;import com.sxc.gateway.client.GWPageResult;import com.sxc.gateway.client.GWResult;import com.sxc.jothuheim.finance.client.provider.account.AccountQueryProvider;import com.sxc.jothuheim.finance.client.result.account.AccountBalanceDTO;import com.sxc.jothuheim.userbaseclient.param.UserInfoQueryDTO;import com.sxc.jothuheim.userbaseclient.provider.UserBaseQueryProvider;import com.sxc.jothuheim.userbaseclient.result.BaseUserInfoDTO;import com.sxc.jotunheim.order.param.query.OrderQueryDTO;import com.sxc.jotunheim.provider.sku.SkuQueryProvider;import com.sxc.jotunheim.result.sku.SkuDTO;import com.sxc.jotunheim.trade.param.RebateQueryDTO;import com.sxc.jotunheim.trade.param.queryorder.orderpage.OrderPageQTO;import com.sxc.jotunheim.trade.param.rebate.OrderRebateExecuteDTO;import com.sxc.jotunheim.trade.provider.MarketWaveRebateProvider;import com.sxc.jotunheim.trade.provider.MarketWaveRebateQueryProvider;import com.sxc.jotunheim.trade.provider.QueryOrderProvider;import com.sxc.jotunheim.trade.provider.TradeInfoQueryProvider;import com.sxc.jotunheim.trade.result.TradeInfoDTO;import com.sxc.jotunheim.trade.result.query.OrderDTO;import com.sxc.jotunheim.trade.result.query.OrderDetailDTO;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Import;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;import org.testng.annotations.Test;import java.util.Collection;import java.util.Date;import java.util.List;import java.util.concurrent.CountDownLatch;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;import java.util.stream.Collectors;@Configuration@EnableDubbo//@DubboComponentScan(basePackages="com.sxc.*")@Slf4j@ContextConfiguration(locations = {"/META-INF/spring/tradedata-context.xml"})public class TestProvider extends AbstractTestNGSpringContextTests {	@Reference(timeout = 6000000, version = "1.0.0.test")	SkuQueryProvider skuQueryProvider;	@Reference(timeout = 6000000)	UserBaseQueryProvider userBaseQueryProvider;	@Reference(timeout = 6000000)	MarketWaveRebateQueryProvider marketWaveRebateQueryProvider;	@Reference(timeout = 6000000)	MarketWaveRebateProvider marketWaveRebateProvider;    @Reference(timeout = 6000000)	QueryOrderProvider queryOrderProvider;//    @Reference(timeout = 6000000)//	SaleRightsQueryProvider saleRightsQueryProvider;	@Reference(timeout = 6000000)	AccountQueryProvider accountQueryProvider;	@Reference(timeout = 6000000)	TradeInfoQueryProvider tradeInfoQueryProvider;	@Test	public void test() {		GWResult<SkuDTO> skuResult = skuQueryProvider.queryById(9563);		SkuDTO skuDTO = skuResult.getResult();		log.info("test=" + JSON.toJSONString(skuDTO));	}	@Test	public void test1() {		UserInfoQueryDTO userInfoQueryDTO=new UserInfoQueryDTO();		userInfoQueryDTO.setIsValid(1);		userInfoQueryDTO.setMobilePhone("13093863511");		userInfoQueryDTO.setUserType(1);		System.out.println(JSON.toJSONString(userInfoQueryDTO));		GWListResult<BaseUserInfoDTO> re= userBaseQueryProvider.getUserInfo(userInfoQueryDTO);		Collection<BaseUserInfoDTO> cl=re.getResult();		log.info("test1=" + JSON.toJSONString(cl));	}	@Test	public void test2() {		RebateQueryDTO rebateQueryDTO = new RebateQueryDTO();		rebateQueryDTO.setType(31);		rebateQueryDTO.setSourceId("[136,137,138,139,140]");		System.out.println(marketWaveRebateQueryProvider.queryOrderRebateDetailByFinanceChannel(rebateQueryDTO).getResult());	}	@Test	public void test3() {//		OrderPageQTO orderQueryDTO=new OrderPageQTO();//		orderQueryDTO.setBuyerId(48830);//		orderQueryDTO.setCurPage(1);//		orderQueryDTO.setOrderStatus(1);//		orderQueryDTO.setPageSize(5);//		orderQueryDTO.setSourceType(2);//		orderQueryDTO.setQueryType(1);////		//GWPageResult<OrderDTO> re = queryOrderProvider.queryOrder(orderQueryDTO,1);////		OrderDetailQTO orderDetailQTO=new OrderDetailQTO();//		orderDetailQTO.setOrderNo("190416713400000020");//		orderDetailQTO.setOrderStatus(2);//		orderDetailQTO.setSourceType(3);////		GWResult<OrderDetailDTO> re = queryOrderProvider.getOrder(orderDetailQTO,1);////		log.info("test5=" + JSON.toJSONString(re.getResult()));	}	@Test	public void test4() throws Exception{		Integer userId=48830;		OrderRebateExecuteDTO rebateExecute=new OrderRebateExecuteDTO();		rebateExecute.setChooseOrderTimeStr("2019-05-29");		rebateExecute.setChoosePriceTimeStr("2019-05-29 11:49:43");		rebateExecute.setRuleId(61);		final CountDownLatch begin = new CountDownLatch(1);  //为0时开始执行		final ExecutorService exec = Executors.newFixedThreadPool(100);		for (int i = 0; i < 10; i++) {			final int NO =  i;			Runnable runnable = new Runnable() {				public void run() {					try {						begin.await();						//执行业务部分						System.out.println("==================");						marketWaveRebateProvider.executeRebate(rebateExecute,userId);					} catch (InterruptedException e) {						e.printStackTrace();					}				}			};			exec.submit(runnable);		}		System.out.println("开始执行");		begin.countDown();		exec.awaitTermination(60000, TimeUnit.MILLISECONDS);	}	@Test	public void test5() {//		long start = System.currentTimeMillis();//		System.out.println(start);//		Collection<com.sxc.ssp.adpater.params.staff.SkuDTO> result//				= saleRightsQueryProvider.querySkuRights(22871).getResult();//		System.out.println(System.currentTimeMillis()-start);//		List<Integer> collect = result.stream().map(com.sxc.ssp.adpater.params.staff.SkuDTO::getSkuId).collect(Collectors.toList());//		System.out.println(collect);//		log.info("test5=" + JSON.toJSONString(collect));	}	@Test	public void test6() {		OrderPageQTO OrderPageQTO=new OrderPageQTO();		OrderPageQTO.setQueryType(1);		OrderPageQTO.setSourceType(2);		OrderPageQTO.setCurPage(1);		OrderPageQTO.setPageSize(15);		OrderPageQTO.setBuyerId(48830);		GWPageResult<OrderDTO> pageResult = queryOrderProvider.queryOrder(OrderPageQTO, 836);		log.info("test6=" + JSON.toJSONString(pageResult));	}	@Test	public void test7() {		GWResult<AccountBalanceDTO> re=accountQueryProvider.findAccountBalanceByUserId(31327,31327);		log.info("test7=" + JSON.toJSONString(re.getResult()));	}	@Test	public void test8() {		GWResult<TradeInfoDTO> re=tradeInfoQueryProvider.queryBySaleId(30610);		log.info("test8=" + JSON.toJSONString(re.getResult()));	}	@Test	public void test9() {		GWResult<Boolean> record= marketWaveRebateProvider.manualRecordRebate(41684);		GWResult<Boolean>  manul=marketWaveRebateProvider.manualGrantRebate(41684);		log.info("test9=" + record.getResult() +manul.getResult());	}	@Test	public void test10() throws Exception{		Integer userId=48830;		OrderRebateExecuteDTO rebateExecute=new OrderRebateExecuteDTO();		rebateExecute.setChooseOrderTimeStr("2019-05-29");		rebateExecute.setChoosePriceTimeStr("2019-05-29 15:13:19");		rebateExecute.setRuleId(61);		final CountDownLatch begin = new CountDownLatch(1);  //为0时开始执行		final ExecutorService exec = Executors.newFixedThreadPool(100);		for (int i = 0; i < 1; i++) {			final int NO =  i;			Runnable runnable = new Runnable() {				public void run() {					try {						begin.await();						//执行业务部分						System.out.println("==================");						marketWaveRebateProvider.executeRebate(rebateExecute,userId);					} catch (InterruptedException e) {						e.printStackTrace();					}				}			};			exec.submit(runnable);		}		System.out.println("开始执行");		begin.countDown();		exec.awaitTermination(60000, TimeUnit.MILLISECONDS);	}	@Autowired	private OrderService orderService;	@Autowired	private BalanceService balanceService;	@Test	public void test11() {//		String[] mobiles= {"13699512634","15356170982","13093863511","13000000001","13000000003","13000000005","13000000007","13000000008","13000000009","13000000010","13000000011","13000000012","13000000013","13000000014"};//		System.out.println("用户数="+mobiles.length);//		for (String mobile:mobiles//			 ) {//			System.out.println("======================mobile="+mobile);////			//先给小B用户加余额//			balanceService.modifyBalance(mobile,1000000L,0L,0L);//			//然后在下单//			orderService.placeOrder(mobile);////			//然后清理余额//			balanceService.clearBalance(mobile);////		}		for(int i=0;i<10;i++){			orderService.placeOrder("13093863511");		}	}}