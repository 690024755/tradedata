package com.songxiaocai.tradedata.test;/* * Description:com.songxiaocai.tradedata.test * @Date Create on 16:11 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-06-10日SXC All Rights Reserved. */import com.alibaba.dubbo.config.annotation.Reference;import com.alibaba.fastjson.JSON;import com.songxiaocai.tradedata.application.repository.SxcUserRepository;import com.songxiaocai.tradedata.infrastructure.repository.impl.SxcUserRepositoryImpl;import com.songxiaocai.tradedata.infrastructure.repository.mapper.SxcUserMapper;import com.songxiaocai.tradedata.service.params.SxcUserInfoDTO;import com.sxc.gateway.client.GWResult;import com.sxc.jotunheim.provider.sku.SkuQueryProvider;import com.sxc.jotunheim.result.sku.SkuDTO;import lombok.extern.slf4j.Slf4j;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;import org.testng.annotations.BeforeClass;import org.testng.annotations.BeforeMethod;import org.testng.annotations.Test;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import static org.mockito.Mockito.*;import static org.mockito.Mockito.spy;@Slf4j@ContextConfiguration(locations = {"/META-INF/spring/tradedata-context.xml"})public class MockTest extends AbstractTestNGSpringContextTests {	@Autowired	SxcUserRepository sxcUserRepository;	@Mock	SxcUserRepository sxcUserRepositoryMock;	@BeforeMethod	public void beforeMethod(){		System.out.println("beforeMethod======");		MockitoAnnotations.initMocks(this);	}	@Mock	List<String> mockList2;	@Mock	SkuQueryProvider skuQueryProvider;	@Test	public void test1() {		//mockList1的测试		List<String> mockList1 = mock(List.class);		when(mockList1.get(0)).thenReturn("mockList1-zero");		System.out.println(mockList1.get(0));		when(mockList1.get(1)).thenReturn("mockList1-one");		System.out.println(mockList1.get(1));		//mockList2的测试		when(mockList2.get(0)).thenReturn("mockList2-zero");		System.out.println(mockList2.get(0));		when(mockList2.get(1)).thenReturn("mockList2-one");		System.out.println(mockList2.get(1));		//真实的，非模拟数据		HashMap<String, Object> hs = new HashMap<String, Object>();		hs.put("mobilePhone", "13093863511");		hs.put("userType", 1);		SxcUserInfoDTO Result =sxcUserRepository.getByMobilePhone(hs);		System.out.println("真实的数据 =" + JSON.toJSONString(Result));		//模拟的，非真实数据		SxcUserInfoDTO ResultMock = mock(SxcUserInfoDTO.class);		when(ResultMock.getUserId()).thenReturn(1234);		when(ResultMock.getUserName()).thenReturn("mock-yy");		when(ResultMock.getMobilePhone()).thenReturn("mock-13093863511");		when(ResultMock.getCityCode()).thenReturn(990100);		System.out.println("非真实的数据 =" +JSON.toJSONString(ResultMock));		GWResult<SkuDTO> skuResult = mock(GWResult.class);		SkuDTO skuDTO=mock(SkuDTO.class);		when(skuDTO.getSkuId()).thenReturn(12345);		when(skuResult.getResult()).thenReturn(skuDTO);		System.out.println("skuResult =" +JSON.toJSONString(skuResult));		List list = new LinkedList();		List spy = spy(list);		doReturn("foo").when(spy).get(0);		//when(spy.get(0)).thenReturn("foo");		System.out.println(spy.get(0));		//https://cloud.tencent.com/developer/article/1056721		SxcUserRepository sxcUserRepositorySpy=spy(sxcUserRepository);		SxcUserInfoDTO sxcUserInfoDTOSpy=spy(sxcUserRepositorySpy.getByMobilePhone(hs));		doReturn(4999).when(sxcUserInfoDTOSpy.getUserId());		System.out.println(sxcUserInfoDTOSpy.getUserId());	}}