package com.songxiaocai.tradedata.test;/* * Description:com.songxiaocai.tradedata.test * @Date Create on 14:04 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-02-15日SXC All Rights Reserved. */import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.songxiaocai.tradedata.application.repository.SxcAccountRepository;import com.songxiaocai.tradedata.application.repository.SxcGatewayApiRepository;import com.songxiaocai.tradedata.application.repository.SxcUserRepository;import com.songxiaocai.tradedata.client.result.SxcAccountInfoDTO;import com.songxiaocai.tradedata.config.dataSource.DataSourceTypeManager;import com.songxiaocai.tradedata.config.dataSource.DataSources;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcAccount;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcFixPriceBaseInfo;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcGatewayApi;import com.songxiaocai.tradedata.infrastructure.repository.entity.SxcOrder;import com.songxiaocai.tradedata.infrastructure.repository.entity.example.SxcFixPriceBaseInfoExample;import com.songxiaocai.tradedata.infrastructure.repository.mapper.SxcFixPriceBaseInfoMapper;import com.songxiaocai.tradedata.infrastructure.repository.mapper.SxcOrderMapper;import com.songxiaocai.tradedata.service.*;import com.songxiaocai.tradedata.service.params.SxcGatewayApiInfoDTO;import com.songxiaocai.tradedata.service.params.SxcUserInfoDTO;import com.songxiaocai.tradedata.tool.http.HttpRequestSimple;import com.songxiaocai.tradedata.tool.jedis.JedisTemplate;import com.sxc.common.domain.result.Result;import com.sxc.jotunheim.result.sku.DownSkuInfoDTO;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;import org.testng.annotations.Test;import java.security.MessageDigest;import java.util.*;import java.util.concurrent.CountDownLatch;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;import java.util.stream.Collectors;import java.util.stream.Stream;import static com.google.common.primitives.Ints.asList;@Slf4j@ContextConfiguration(locations = {"/META-INF/spring/tradedata-context.xml"})public class TestService extends AbstractTestNGSpringContextTests {	//private static Logger log = LoggerFactory.getLogger(TestService.class);	@Autowired	private SxcUserRepository sxcUserRepository;	@Autowired	private SxcAccountRepository sxcAccountRepository;	@Autowired	JedisTemplate jedisTemplate;	@Test	public void test1() {		jedisTemplate.set("test", "test");		System.out.println(jedisTemplate.get("test"));		Object tt = jedisTemplate.hget("testProd.13093863511.songxiaocai_login.15325762", "userId");		System.out.println("tt=" + tt);		HashMap<String, Object> hs = new HashMap<String, Object>();		hs.put("mobilePhone", "13093863511");		hs.put("userType", 1);		SxcUserInfoDTO Result = sxcUserRepository.getByMobilePhone(hs);		System.out.println(JSON.toJSONString(Result));		SxcAccount sxcAccount=new SxcAccount();		sxcAccount.setState(1);		sxcAccount.setAccountId(100);		wrapCreateParams(Result,sxcAccount);		System.out.println(JSON.toJSONString(Result));	}	private void wrapCreateParams(SxcUserInfoDTO sxcUserInfoDTO, SxcAccount sxcAccount){		sxcUserInfoDTO.setUserName(String.valueOf(sxcAccount.getAccountId()));	}	@Test	public void test2() {		SxcAccountInfoDTO Result = sxcAccountRepository.getByUserId(48830);		System.out.println("test2=" + JSON.toJSONString(Result));		log.info(JSON.toJSONString(Result));		log.info(JSON.toJSONString(Result));	}	@Test	public void test3() {		/**		 * 修改小B用户账户余额		 * 金额100为1元		 */		Boolean Result = sxcAccountRepository.modifyBalance(48830, 1000L, 1000L, 1000L, 1000L);		System.out.println("test3=" + JSON.toJSONString(Result));	}	@Autowired	private HttpRequestSimple httpclent;	@Test	public void test4() {		Integer SESSION_MAX_AGE = 60 * 60 * 24 * 30;		Map<String, String> hashmap = new HashMap<String, String>();		hashmap.put("appKey", "18701298");		hashmap.put("bizCode", "erp_login");		hashmap.put("deviceUUID", "9a6c608fbc1f488edd7a14e9488397c5");		hashmap.put("mobilePhone", "18888888888");		hashmap.put("password", "12345");		String url = "https://gateway.songxiaocai.net/login/login";		//HttpRequestSimple httpclent = new HttpRequestSimple();		log.info("登录请求报文:" + JSON.toJSONString(hashmap));		String resJson_login = httpclent.postSendHttpWeb(url, JSON.toJSONString(hashmap));		log.info("登录返回报文:" + resJson_login);		String sessionId = JSONObject.parseObject(resJson_login).getJSONObject("result").getString("sessionId");		StringBuffer redis_key = new StringBuffer("18888888888").append("-").append("18701298").append("-").append("erp_login");		jedisTemplate.set(redis_key.toString(), sessionId, SESSION_MAX_AGE);		Object tt = jedisTemplate.get(redis_key.toString());		System.out.println(tt);	}	@Autowired	private CouponsService couponsService;	@Test	public void test5() {		couponsService.sendCoupons("13093863511", 1, 10, "[152]", "[1]");	}	@Autowired	private CutOrderService cutOrderService;	@Test	public void test6() {		Result<String> re = cutOrderService.modifyCutOffTime("13093863511", 5934);		log.info("修改结果=" + re);	}	@Autowired	private BalanceService balanceService;	@Test	public void test7() {		Result<String> re = balanceService.modifyBalance("13093863511", 1000L, 1000L, 1000L);		log.info("修改结果=" + re);	}	@Autowired	private GoodsgroupService goodsgroupService;	@Test	public void test8() {		Result<DownSkuInfoDTO> re = goodsgroupService.skuInfo("1", "1", "1");		log.info("修改结果=" + re);	}	@Test	public void test9() {		Result re = goodsgroupService.relationEdit("6612,6613", "21,22", "21,22", "41864");		log.info("修改结果=" + re);	}	@Test	public void test10() {		DataSourceTypeManager.set(DataSources.dev);		HashMap<String, Object> hs = new HashMap<String, Object>();		hs.put("mobilePhone", "13093863511");		hs.put("userType", 1);		SxcUserInfoDTO Resultdev = sxcUserRepository.getByMobilePhone(hs);		System.out.println("DataSources.dev  test1=" + JSON.toJSONString(Resultdev));		DataSourceTypeManager.reset();		SxcUserInfoDTO ResulttestProd = sxcUserRepository.getByMobilePhone(hs);		System.out.println("DataSources.testProd  test1=" + JSON.toJSONString(ResulttestProd));	}	@Autowired	private SxcGatewayApiRepository sxcGatewayApiRepository;	@Test	public void test11() {		SxcGatewayApiInfoDTO sxcGatewayApiInfoDTO = sxcGatewayApiRepository.getApiByName("songxiaocai.ssp.staff.relation.select.init");		System.out.println("test11=" + JSON.toJSONString(sxcGatewayApiInfoDTO));	}	@Autowired	private GatewayService gatewayService;	@Test	public void test12() {		Result<String> re = gatewayService.modifyApiDefine("songxiaocai.ssp.staff.relation.select.yy");		System.out.println("test11=" + JSON.toJSONString(re));	}	@Test	public void test13() {		Result<String> re = gatewayService.modifyApiDefine("");		System.out.println("test11=" + JSON.toJSONString(re));	}	@Autowired	private SxcFixPriceBaseInfoMapper sxcFixPriceBaseInfoMapper;	@Test	public void test14() {		SxcFixPriceBaseInfoExample sxcFixPriceBaseInfoExample = new SxcFixPriceBaseInfoExample();		SxcFixPriceBaseInfoExample.Criteria cr = sxcFixPriceBaseInfoExample.createCriteria();		cr.andItemIdEqualTo(9478);		List<SxcFixPriceBaseInfo> yy = sxcFixPriceBaseInfoMapper.selectByExample(sxcFixPriceBaseInfoExample);		SxcFixPriceBaseInfo sxcFixPriceBaseInfo = new SxcFixPriceBaseInfo();		sxcFixPriceBaseInfo.setSpuName("云南洋葱60斤编织袋");		sxcFixPriceBaseInfoMapper.updateByExampleSelective(sxcFixPriceBaseInfo, sxcFixPriceBaseInfoExample);		List<SxcFixPriceBaseInfo> yy1 = sxcFixPriceBaseInfoMapper.selectByExample(sxcFixPriceBaseInfoExample);		System.out.println(yy1);	}	@Autowired	com.songxiaocai.tradedata.infrastructure.repository.mapper.SxcGatewayApiMapper sxcGatewayApiMapper;	@Test	public void test15() throws Exception {		List<SxcGatewayApi> list = new ArrayList<>();		SxcGatewayApi test1 = new SxcGatewayApi();		test1.setApiName("songxiaocai.zhudi.feign.test");		test1.setGmtModified(new Date());		SxcGatewayApi test2 = new SxcGatewayApi();		test2.setGmtModified(new Date());		test2.setApiName("songxiaocai.zhudi.feign.notexist.test");		list.add(test1);		list.add(test2);		sxcGatewayApiMapper.updateBatch(list);	}	@Autowired	SxcOrderMapper sxcOrderMapper;	@Test	public void test16() {		Integer buyerId = 48830;		List<SxcOrder> lists = sxcOrderMapper.getByBuyerId(buyerId);		for (SxcOrder sxcOrder : lists) {			if (sxcOrder.getOrderNo().equals("190417518100000103")) {				HashMap<String, Object> hs = new HashMap<String, Object>();				hs.put("state", 0);				hs.put("buyerId", buyerId);				int i = sxcOrderMapper.modifyStatee(hs);				System.out.println(i);				break;			}		}	}	@Autowired	UserService userService;	@Test	public void test17() {		Result<String> re = userService.saveBusinessUser("", "19900000088", "");		System.out.println(re);	}	@Test	public void test18() {		//生成一个服务占销售的内部角色		Result<String> re = userService.saveInnerUserwhenNotExist("13000000002", "内部测试账号", "2,");		System.out.println(re);	}	@Test	public void test19() {		System.out.println("加密=" + getMD5("12345") + "   长度=" + getMD5("12345").length());		System.out.println("解密=" + getMD5("12345"));	}	public static String getMD5(String data) {		String result = "";		try {			MessageDigest md5 = MessageDigest.getInstance("MD5");			md5.update(data.getBytes("ISO-8859-1"));			byte bytes[] = md5.digest();			for (int i = 0; i < bytes.length; i++) {				result += Integer.toHexString(						(0x000000ff & bytes[i]) | 0xffffff00).substring(6);			}		} catch (Exception ex) {			ex.printStackTrace();			return "";		}		return result;	}	@Test	public void test20() {		//生成一个服务占销售的内部角色//		Result<String> re = userService.editInnerUser("18605886945", "2,18,");//		System.out.println(re);		userService.saveInnerUserwhenNotExist("18605886945","张雪-内部","2,18,");//		userService.saveInnerUserwhenNotExist("","","2,18,");	}	@Test	public void test21() {		List<String> list = Stream.of("test1", "test2").collect(Collectors.toList());		System.out.println(JSON.toJSONString(list));	}	@Test	public void test22() throws Exception{		jedisTemplate.set("test","test");		final CountDownLatch begin = new CountDownLatch(1);  //为0时开始执行		//Lock lock=new ReentrantLock();		final ExecutorService exec = Executors.newFixedThreadPool(10);		for (int i = 1; i <= 2; i++) {			final int NO = i;			Runnable runnable = new Runnable() {				public void run() {					try {						begin.await();						//执行业务部分						//lock.lock();						jedisTemplate.set("test","test");						System.out.println("=================="+NO+"="+jedisTemplate.get("test"));						jedisTemplate.del("test");					} catch (InterruptedException e) {						e.printStackTrace();					}finally {						//lock.unlock();					}				}			};			exec.submit(runnable);		}		System.out.println("开始执行");		begin.countDown();		exec.awaitTermination(40000, TimeUnit.MILLISECONDS);	}	@Autowired	private GoodsPriceService goodsPriceService;	@Autowired	private FreightFeeService freightFeeService;	@Test	public void test23() throws Exception{//设置支付1分钱//		System.out.println(goodsPriceService.modifyRaisePrice(9478,0L));//		System.out.println(goodsPriceService.modifyBasePrice(9478,1L));//		System.out.println(freightFeeService.modifyFreightFee(16,"13093863511",false));		System.out.println(goodsPriceService.modifyRaisePrice(10039,1500L));		System.out.println(goodsPriceService.modifyBasePrice(10039,1000L));//		System.out.println(freightFeeService.modifyFreightFee(16,"13093863511",true));	}//	@Autowired//	private ItemQueryFacade itemQueryFacade;	@Test	public void test24() {//		String DATE_FORMAT_YYYY_MM_DD = "yyyy-MM-dd";//	    String DATE_FORMAT_YYYY_MM_DD_HH_MM_SS = "yyyy-MM-dd HH:mm:ss";//		OrderRebateExecuteDTO rebateExecute=new OrderRebateExecuteDTO();//		rebateExecute.setRuleId(88);//		rebateExecute.setChooseOrderTimeStr("2019-05-31");//		rebateExecute.setChoosePriceTimeStr("2019-06-31 10:00:00");//		Date chooseOrderTIme = DateTool.parseDateStr(rebateExecute.getChooseOrderTimeStr(), DATE_FORMAT_YYYY_MM_DD);//		Date choosePriceTime = DateTool.parseDateStr(rebateExecute.getChoosePriceTimeStr(), DATE_FORMAT_YYYY_MM_DD_HH_MM_SS);//		System.out.println("chooseOrderTIme="+chooseOrderTIme);//		System.out.println("choosePriceTime="+choosePriceTime);//		DateTool.diff(chooseOrderTIme,choosePriceTime,Calendar.DATE);//		List<GoodsGroupRelationDTO> goodsGroupRelationDTOS =//				itemQueryFacade.queryGroupRelationListByGroupIds(Lists.newArrayList(1));//		List<Integer> skuIdList =//				goodsGroupRelationDTOS.stream().map(GoodsGroupRelationDTO::getTargetId).collect(Collectors.toList());	}	@Test	public void test25() {	}	public void testList(List<Integer> lists) {		for(Integer i:lists){			System.out.println("i="+i);		}	}}