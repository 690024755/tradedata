package com.songxiaocai.tradedata.web.controller.web;/* * Description:com.songxiaocai.tradedata.web.controller.web * @Date Create on 11:03 * @author <a href="mailto:yangyi@songxiaocai.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-02-22日SXC All Rights Reserved. */import com.songxiaocai.tradedata.client.result.SxcUserInfoVO;import com.songxiaocai.tradedata.service.UserService;import com.songxiaocai.tradedata.service.params.SxcUserInfoDTO;import com.songxiaocai.tradedata.tool.jedis.JedisTemplate;import com.sxc.common.domain.result.Result;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.beans.BeanUtils;@Slf4j@Controller@RequestMapping("/api/tradedata/web")public class UserController {	@Autowired	private UserService userService;	@Autowired	private JedisTemplate jedisTemplate;	@RequestMapping(value = "/getUser",method = RequestMethod.GET)	@ResponseBody	public Result<?> getUser(String mobile) {		Result result=new Result();		if(StringUtils.isAllBlank(mobile))		{			result.setSuccess(false);			result.setErrorMessage("请求参数为空！");			log.info("mobile: {}", mobile);			return result;		}		SxcUserInfoVO sxcUserInfoVO=new SxcUserInfoVO();		try{			Result<SxcUserInfoDTO> re= userService.getUser(mobile);			BeanUtils.copyProperties(re.getData(),sxcUserInfoVO);			if (sxcUserInfoVO!=null ){			result.setData(sxcUserInfoVO);			result.setSuccess(true);}			return result;		}catch (Exception e){			log.error("sxcUserInfoDTO: {}", sxcUserInfoVO, e);			result.setE(e);		}		return result;	}	/**	 *快速生成小B用户	 * @param businessMobile 小B手机号码	 * @param saleMobile 销售手机号码	 * @param defaultBusinessUserName 小B姓名	 * @return	 */	@RequestMapping(value = "/save/businessUser",method = RequestMethod.POST)	@ResponseBody	public Result<?> saveBusinessUser(String businessMobile,String saleMobile,String defaultBusinessUserName) {		Result result=new Result();		try{			Result<String> re= userService.saveBusinessUser(businessMobile,saleMobile,defaultBusinessUserName);				if(!re.isSuccess()){					result.setData(re.getData());					result.setSuccess(re.isSuccess());					result.setErrorMessage(re.getErrorMessage());					result.setE(re.getE());					return result;				}			result.setData(re.getData());			result.setSuccess(re.isSuccess());			result.setSuccessInfo(re.getSuccessInfo());		}catch (Exception e){			result.setSuccess(false);			result.setErrorMessage("小B用户注册异常");			log.error("小B用户注册异常", e);			result.setE(e);		}		return result;	}	/**	 * 快速生成内部角色用户	 * @param innerUserName	 * @param roleIdS	 * @param innerMobilePhone	 * @return	 */	@RequestMapping(value = "/save/InnerUser",method = RequestMethod.POST)	@ResponseBody	public Result<?> saveInnerUser(String innerMobilePhone,String innerUserName,String roleIdS) {		Result result=new Result();		try{			Result<String> re= userService.saveInnerUserwhenNotExist(innerMobilePhone,innerUserName,roleIdS);			if(!re.isSuccess()){				result.setData(re.getData());				result.setSuccess(re.isSuccess());				result.setErrorMessage(re.getErrorMessage());				result.setE(re.getE());				return result;			}			result.setData(re.getData());			result.setSuccess(re.isSuccess());			result.setSuccessInfo(re.getSuccessInfo());		}catch (Exception e){			result.setSuccess(false);			result.setErrorMessage("内部用户创建异常");			log.error("内部用户创建异常", e);			result.setE(e);		}		return result;	}}